var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/interfaces/Access.html",[0,1.37,1,1.76]],["body/interfaces/Access.html",[0,1.98,1,3.362,2,2.333,3,0.302,4,0.262,5,0.223,6,2.333,7,0.809,8,0.387,9,1.696,10,3.689,11,4.134,12,2.577,13,0.711,14,0.03,15,0.455,16,3.09,17,3.689,18,3.09,19,2.615,20,1.619,21,2.405,22,2.615,23,1.98,24,2.615,25,0.449,26,0.016,27,1.619,28,1.619,29,1.382,30,2.108,31,2.108,32,2.333,33,1.619,34,0.688,35,0.809,36,2.108,37,2.544,38,2.615,39,1.28,40,2.615,41,2.792,42,1.382,43,1.619,44,1.619,45,2.615,46,0.016,47,0.021,48,0.016]],["title/controllers/AppController.html",[49,1.37,50,2.138]],["body/controllers/AppController.html",[3,0.365,4,0.317,5,0.27,8,0.468,14,0.029,15,0.514,25,0.365,26,0.019,35,1.211,46,0.019,47,0.023,48,0.019,49,1.807,50,3.49,51,1.807,52,3.618,53,2.821,54,3.618,55,1.309,56,5.079,57,2.128,58,0.764,59,4.311,60,1.058,61,0.699,62,3.119,63,3.618,64,4.311,65,3.162,66,1.807,67,1.143,68,4.311]],["title/modules/AppModule.html",[69,1.173,70,2.138]],["body/modules/AppModule.html",[3,0.209,4,0.181,5,0.155,7,0.56,13,0.49,14,0.03,15,0.596,20,1.121,25,0.209,26,0.011,33,1.121,46,0.011,47,0.016,48,0.011,50,2.84,51,1.529,61,0.4,62,2.885,63,2.072,69,1.837,70,4.045,71,1.121,72,1.121,73,1.329,74,1.329,75,1.121,76,2.338,77,1.329,78,2.072,79,2.072,80,2.072,81,3.166,82,3.129,83,3.166,84,2.885,85,1.965,86,1.329,87,1.329,88,2.468,89,3.348,90,2.468,91,2.468,92,2.468,93,2.468,94,1.81,95,1.329,96,2.468,97,3.649,98,3.649,99,2.072,100,2.468,101,2.468,102,1.81,103,1.459,104,2.387,105,2.468,106,2.468,107,2.387,108,2.468,109,2.072,110,2.148,111,1.615,112,3.062,113,3.183,114,2.245,115,2.468,116,3.643,117,3.183,118,2.468,119,1.615,120,2.468,121,1.81,122,2.468,123,2.468,124,2.468,125,1.459,126,2.468,127,1.81,128,2.468,129,2.468,130,2.468,131,2.468,132,2.468,133,2.468,134,2.072,135,3.643,136,1.81,137,2.468,138,2.072,139,2.468,140,2.468,141,2.468,142,2.468,143,2.072,144,2.468,145,2.468,146,2.468,147,2.468,148,2.468,149,2.468,150,2.468,151,3.062,152,3.649]],["title/injectables/AppService.html",[62,1.76,153,0.579]],["body/injectables/AppService.html",[3,0.385,4,0.334,5,0.285,8,0.493,14,0.029,15,0.438,25,0.385,26,0.02,35,1.25,46,0.02,47,0.024,48,0.02,55,1.352,56,5.17,58,0.805,60,1.115,61,0.736,62,2.965,67,1.204,153,0.976,154,1.76,155,3.811,156,4.541,157,4.541,158,4.541]],["title/controllers/AuthController.html",[49,1.37,159,2.138]],["body/controllers/AuthController.html",[3,0.329,4,0.285,5,0.243,8,0.421,13,0.52,14,0.03,15,0.561,25,0.329,26,0.017,34,0.748,39,1.791,46,0.017,47,0.022,48,0.017,49,1.626,51,1.626,53,2.537,55,1.225,57,1.914,58,0.687,60,0.952,61,0.629,67,1.028,114,2.312,159,3.264,160,3.254,161,3.878,162,4.187,163,3.878,164,3.136,165,4.989,166,3.878,167,1.11,168,0.88,169,2.844,170,2.537,171,2.844,172,1.914,173,3.254,174,3.878,175,2.844,176,2.462,177,2.844,178,2.844,179,2.089,180,3.878,181,1.914,182,1.761,183,3.254,184,3.878,185,3.878]],["title/classes/AuthDTO.html",[26,0.014,164,1.76]],["body/classes/AuthDTO.html",[3,0.383,4,0.333,5,0.283,8,0.491,9,1.972,13,0.737,14,0.028,25,0.383,26,0.02,35,1.396,39,2.124,46,0.02,47,0.024,48,0.02,58,0.973,125,3.497,164,2.959,168,1.396,186,2.233,187,3.796,188,4.523,189,4.523]],["title/injectables/AuthMiddleware.html",[153,0.579,190,2.396]],["body/injectables/AuthMiddleware.html",[3,0.359,4,0.311,5,0.265,8,0.46,13,0.568,14,0.029,15,0.408,25,0.359,26,0.019,34,0.817,46,0.019,47,0.023,48,0.019,55,1.295,58,0.75,60,1.04,61,0.687,153,0.935,154,1.642,167,1.212,168,0.961,190,3.869,191,3.554,192,5.275,193,5.275,194,5.745,195,5.047,196,4.213,197,4.235,198,3.554,199,3.106,200,5.275,201,2.771]],["title/modules/AuthModule.html",[69,1.173,81,1.931]],["body/modules/AuthModule.html",[3,0.275,4,0.239,5,0.203,14,0.03,15,0.597,25,0.275,26,0.014,46,0.014,47,0.02,48,0.014,51,1.859,61,0.526,69,1.813,71,1.474,72,1.474,73,1.748,74,1.748,75,1.474,76,2.72,77,1.748,81,3.771,82,3.233,84,3.158,85,2.388,86,1.748,87,1.748,89,3.304,109,2.724,110,1.958,111,2.124,114,1.361,116,2.724,117,2.38,135,2.724,159,3.304,176,2.894,177,2.38,179,1.748,202,2.724,203,3.246,204,2.724,205,3.467,206,3.246,207,3.246,208,3.246,209,3.246,210,2.38,211,3.246,212,3.246,213,3.246,214,3.246,215,2.38,216,3.246,217,3.246,218,2.724,219,3.246,220,3.246,221,3.246]],["title/injectables/AuthService.html",[153,0.579,176,1.613]],["body/injectables/AuthService.html",[3,0.245,4,0.213,5,0.181,7,0.656,8,0.314,9,1.469,13,0.693,14,0.03,15,0.545,25,0.245,26,0.013,34,0.916,35,0.656,39,1.956,42,1.121,46,0.013,47,0.018,48,0.013,55,1.005,58,0.915,60,1.005,61,0.469,66,2.284,67,1.085,110,1.121,111,1.893,114,2.371,153,0.915,154,1.121,162,3.434,164,2.781,167,1.359,168,1.078,172,1.428,175,2.121,176,2.548,181,2.02,182,2.474,210,2.121,222,2.427,223,2.807,224,5.163,225,2.892,226,2.548,227,4.748,228,5.163,229,4.092,230,3.434,231,4.092,232,2.892,233,2.427,234,2.892,235,2.892,236,1.428,237,1.558,238,2.204,239,2.892,240,2.892,241,2.892,242,3.052,243,2.892,244,1.715,245,2.892,246,2.892,247,1.428,248,1.039,249,1.314,250,2.427,251,2.427,252,2.121,253,2.427,254,4.092,255,2.892]],["title/modules/ConfigModule.html",[69,1.173,82,1.76]],["body/modules/ConfigModule.html",[3,0.351,4,0.305,5,0.26,14,0.029,15,0.502,25,0.351,26,0.018,46,0.018,47,0.023,48,0.018,61,0.673,69,2.043,71,1.883,72,1.883,73,2.233,74,2.233,75,1.883,76,2.804,77,3.065,82,3.311,85,2.804,86,2.233,87,2.233,110,2.497,151,3.48,248,1.489,256,3.48,257,3.48,258,4.147,259,4.147,260,4.147,261,4.147,262,4.147]],["title/injectables/ConfigService.html",[110,1.267,153,0.579]],["body/injectables/ConfigService.html",[0,1.072,3,0.217,4,0.188,5,0.16,7,1.006,8,0.278,9,1.345,12,1.57,13,0.655,14,0.03,15,0.47,25,0.317,26,0.011,34,0.855,35,1.304,36,2.214,42,1.452,46,0.011,47,0.016,48,0.011,55,0.92,58,0.864,60,1.197,61,0.415,66,1.858,67,0.993,110,1.452,113,4.43,119,1.674,121,1.876,153,0.664,154,0.992,167,1.268,168,1.006,181,1.263,182,2.464,223,2.884,236,1.263,244,1.858,247,1.263,248,0.919,249,2.013,263,1.876,264,4.071,265,3.746,266,3.144,267,3.746,268,2.451,269,2.451,270,3.144,271,3.144,272,3.144,273,2.558,274,2.214,275,2.9,276,3.144,277,2.558,278,3.144,279,4.094,280,3.144,281,2.747,282,3.144,283,2.147,284,1.876,285,2.013,286,2.147,287,2.147,288,2.147,289,2.147,290,2.147,291,2.147,292,2.147,293,2.147,294,2.147,295,2.147,296,4.823,297,2.147,298,2.147,299,2.147,300,2.147,301,2.147,302,2.147,303,2.147,304,2.147,305,2.147,306,2.147,307,2.147,308,2.147,309,2.147,310,2.147,311,3.144,312,2.147,313,2.147,314,2.147,315,2.147,316,2.147]],["title/interfaces/EnvConfig.html",[0,1.37,264,2.138]],["body/interfaces/EnvConfig.html",[0,1.274,2,1.989,3,0.258,4,0.223,5,0.19,12,1.274,14,0.03,15,0.509,25,0.359,26,0.013,35,1.304,36,1.797,42,1.178,46,0.013,47,0.019,48,0.013,58,0.539,60,1.04,61,0.493,66,1.274,67,1.123,110,1.178,113,4.214,119,1.989,121,2.229,153,0.751,182,1.924,223,2.505,236,1.5,244,2.045,247,1.5,248,1.091,249,2.215,263,2.229,264,3.935,266,2.551,268,1.989,269,1.989,270,2.551,271,2.551,272,2.551,274,1.797,275,3.191,276,2.551,278,2.551,279,3.556,280,2.551,281,3.107,282,3.556,283,2.551,284,2.229,285,2.215,286,2.551,287,2.551,288,2.551,289,2.551,290,2.551,291,2.551,292,2.551,293,2.551,294,2.551,295,2.551,296,5.048,297,2.551,298,2.551,299,2.551,300,2.551,301,2.551,302,2.551,303,2.551,304,2.551,305,2.551,306,2.551,307,2.551,308,2.551,309,2.551,310,2.551,311,3.556,312,2.551,313,2.551,314,2.551,315,2.551,316,2.551,317,3.04,318,3.04]],["title/classes/HttpErrorFilter.html",[26,0.014,104,2.138]],["body/classes/HttpErrorFilter.html",[3,0.251,4,0.217,5,0.185,7,0.943,8,0.321,13,0.397,14,0.03,15,0.503,25,0.251,26,0.013,34,0.57,35,0.671,46,0.013,47,0.018,48,0.013,55,1.28,58,0.524,60,0.726,61,0.48,103,1.748,104,3.411,112,3.488,119,3.727,127,2.168,143,4.375,167,0.846,168,0.671,172,1.459,186,1.459,196,2.168,201,3.411,237,1.593,238,2.958,244,2.388,248,1.062,249,1.888,285,1.888,319,3.488,320,2.482,321,5.696,322,5.493,323,4.156,324,5.213,325,2.957,326,4.156,327,4.156,328,5.493,329,4.156,330,3.488,331,4.156,332,4.156,333,2.957,334,3.048,335,2.482,336,2.482,337,2.957,338,2.957,339,2.957,340,2.957,341,3.488,342,2.482,343,2.957,344,2.957,345,2.957,346,2.957,347,2.957,348,4.156,349,2.957,350,2.957,351,2.957,352,4.156,353,2.168,354,4.156,355,2.168,356,2.957,357,2.957,358,2.957,359,2.957,360,2.957,361,2.957,362,2.957]],["title/injectables/JwtStrategy.html",[153,0.579,205,1.931]],["body/injectables/JwtStrategy.html",[3,0.284,4,0.247,5,0.21,8,0.364,13,0.609,14,0.03,15,0.571,25,0.284,26,0.015,34,0.875,39,1.844,43,1.524,46,0.015,47,0.02,48,0.015,55,1.113,58,0.803,60,0.824,61,0.544,66,1.901,67,0.89,110,2.133,111,2.195,114,2.153,117,3.767,153,0.803,154,1.301,164,1.807,167,1.297,168,1.029,175,2.461,176,2.715,177,2.461,179,1.807,181,2.238,182,2.06,183,3.806,205,2.681,215,2.461,218,2.816,233,2.816,237,1.807,238,2.442,242,1.983,244,1.406,247,1.656,248,1.205,249,1.524,250,2.816,251,2.816,253,2.816,363,2.816,364,3.806,365,3.355,366,3.355,367,4.534,368,3.355,369,3.355,370,3.355,371,2.816,372,3.355,373,3.355,374,3.355,375,3.355,376,3.355,377,3.355,378,3.355,379,3.355,380,3.355,381,3.355]],["title/injectables/LoggerInterceptor.html",[107,2.138,153,0.579]],["body/injectables/LoggerInterceptor.html",[3,0.272,4,0.236,5,0.201,7,0.999,8,0.348,13,0.431,14,0.03,15,0.546,25,0.272,26,0.014,34,0.619,46,0.014,47,0.019,48,0.014,55,1.326,58,0.569,60,1.08,61,0.521,67,0.851,103,1.898,107,2.88,153,0.957,154,1.245,167,0.919,168,0.729,172,2.478,201,2.101,244,2.105,285,1.999,330,4.214,335,2.695,336,2.695,353,3.228,382,2.695,383,5.659,384,3.211,385,5.402,386,5.845,387,5.402,388,3.211,389,4.401,390,5.402,391,5.659,392,5.021,393,4.401,394,2.695,395,4.401,396,3.211,397,3.228,398,3.211,399,3.693,400,4.401,401,3.693,402,3.211,403,3.211,404,3.211,405,4.401,406,3.211]],["title/interfaces/RolAccess.html",[0,1.37,37,1.76]],["body/interfaces/RolAccess.html",[0,1.976,1,3.462,2,2.326,3,0.301,4,0.261,5,0.223,6,2.326,7,0.807,8,0.386,9,1.692,10,2.326,11,2.607,12,2.217,13,0.71,14,0.03,15,0.454,16,3.084,17,3.684,18,3.084,19,2.607,20,1.615,21,2.402,22,2.607,23,2.217,24,2.607,25,0.448,26,0.016,27,1.615,28,1.615,29,1.378,30,2.101,31,2.101,32,2.326,33,1.615,34,0.686,35,0.807,36,2.101,37,2.848,38,2.607,39,1.276,40,2.607,41,3.464,42,1.378,43,1.615,44,1.615,45,4.13,46,0.016,47,0.021,48,0.016]],["title/controllers/RolController.html",[49,1.37,407,2.138]],["body/controllers/RolController.html",[3,0.24,4,0.208,5,0.177,7,0.642,8,0.307,13,0.686,14,0.03,15,0.521,23,2.476,25,0.24,26,0.012,28,2.551,29,2.33,34,0.986,46,0.012,47,0.018,48,0.012,49,1.967,51,1.187,53,1.852,54,3.382,55,0.989,57,2.667,58,0.957,60,1.326,61,0.459,65,2.076,66,1.187,67,1.433,167,1.463,168,1.16,169,2.955,170,2.637,171,2.076,178,2.076,179,1.525,285,1.286,407,2.637,408,2.376,409,2.831,410,2.637,411,3.07,412,3.345,413,2.637,414,2.955,415,2.831,416,3.112,417,2.831,418,2.831,419,2.376,420,3.382,421,2.831,422,2.831,423,1.852,424,3.382,425,2.831,426,2.376,427,2.831,428,2.831,429,2.076,430,2.831,431,2.171,432,2.376,433,2.376,434,1.852,435,2.831,436,2.376,437,2.831,438,2.831,439,2.831,440,2.376,441,2.831,442,4.03,443,2.376,444,2.831,445,2.376,446,2.376,447,2.831,448,2.376,449,2.831]],["title/classes/RolDTO.html",[26,0.014,416,1.76]],["body/classes/RolDTO.html",[1,2.917,3,0.316,4,0.274,5,0.234,7,0.847,8,0.405,9,1.748,12,2.04,13,0.727,14,0.029,15,0.469,23,2.04,25,0.316,26,0.021,30,2.206,34,1.045,35,1.105,37,2.917,44,2.46,46,0.016,47,0.021,48,0.016,57,2.402,58,0.96,168,1.105,186,1.842,355,3.569,416,2.621,450,3.132,451,4.084,452,3.732,453,4.867,454,4.867,455,3.732,456,3.732,457,3.732,458,3.569,459,4.867,460,4.867,461,4.867,462,4.867,463,3.732,464,2.737,465,3.132,466,4.867,467,4.867,468,3.732,469,2.737]],["title/classes/RolEntity.html",[26,0.014,27,1.484]],["body/classes/RolEntity.html",[0,1.825,1,3.27,3,0.268,4,0.232,5,0.198,6,2.068,7,0.717,8,0.343,9,1.563,10,2.068,11,2.318,12,2.249,13,0.781,14,0.03,15,0.42,16,3.258,17,3.511,18,3.258,19,2.318,20,1.435,21,2.437,22,2.318,23,2.087,24,2.318,25,0.422,26,0.014,27,1.977,28,2.262,29,1.688,30,1.868,31,2.573,32,2.848,33,1.977,34,0.961,35,0.988,36,2.573,37,2.682,38,2.318,39,1.135,40,2.318,41,3.172,42,1.225,43,1.977,44,2.262,45,2.318,46,0.014,47,0.019,48,0.014,57,2.777,58,0.997,186,1.56,470,3.16,471,3.16,472,2.652,473,3.16,474,3.16,475,2.652,476,3.16,477,3.16,478,2.318,479,3.16]],["title/modules/RolModule.html",[69,1.173,83,1.931]],["body/modules/RolModule.html",[3,0.341,4,0.296,5,0.252,14,0.029,15,0.587,25,0.341,26,0.018,27,1.826,46,0.018,47,0.022,48,0.018,51,2.14,61,0.652,69,2.015,71,1.826,72,1.826,73,2.166,74,2.166,75,1.826,76,3.022,77,2.166,83,3.68,85,2.75,86,2.166,87,2.166,89,2.631,94,2.949,95,2.166,407,3.671,431,3.353,432,3.375,464,2.949,480,3.375,481,3.375,482,4.021,483,4.021,484,4.021]],["title/injectables/RolService.html",[153,0.579,431,1.76]],["body/injectables/RolService.html",[3,0.16,4,0.139,5,0.118,7,0.429,8,0.205,9,1.069,13,0.647,14,0.03,15,0.438,20,0.859,23,2.655,25,0.16,26,0.008,27,0.859,28,2.55,29,2.085,33,1.352,34,0.876,35,0.676,42,0.733,43,1.352,44,1.672,46,0.008,47,0.013,48,0.008,55,0.731,58,0.894,60,1.352,61,0.307,66,0.792,67,1.204,95,1.018,114,2.484,153,0.74,154,0.733,167,1.299,168,1.031,172,0.933,181,1.469,182,1.896,223,3.423,236,0.933,237,1.018,238,2.249,242,3.091,244,1.75,247,1.817,248,1.322,249,1.672,252,2.183,268,2.732,269,1.947,274,2.468,285,2.19,410,1.947,411,1.947,412,2.732,413,2.408,416,2.718,423,1.947,431,2.249,433,1.587,458,2.7,464,1.386,485,1.587,486,2.498,487,3.089,488,3.701,489,1.891,490,3.062,491,2.976,492,3.681,493,2.976,494,1.891,495,2.976,496,4.621,497,2.498,498,1.891,499,2.183,500,1.891,501,1.891,502,3.504,503,2.498,504,1.891,505,1.587,506,1.891,507,1.891,508,3.681,509,3.089,510,3.089,511,3.089,512,1.891,513,1.891,514,3.681,515,2.976,516,1.891]],["title/controllers/UserController.html",[49,1.37,517,2.138]],["body/controllers/UserController.html",[3,0.175,4,0.152,5,0.129,7,0.994,8,0.224,13,0.588,14,0.03,15,0.482,25,0.175,26,0.009,28,2.51,29,2.142,34,0.913,39,2.362,41,2.588,46,0.009,47,0.014,48,0.009,49,2.528,51,0.865,53,1.35,55,0.782,57,2.468,58,0.886,60,1.431,61,0.335,65,1.513,66,0.865,67,1.326,102,1.513,103,1.22,114,1.632,138,3.267,167,1.354,168,1.074,169,2.337,170,2.547,171,1.513,173,2.674,178,1.513,179,1.111,226,1.573,230,1.732,248,1.984,274,2.588,285,2.368,410,2.085,411,2.547,412,2.864,413,2.085,414,2.337,419,1.732,420,2.674,423,1.35,424,2.674,426,1.732,429,1.513,436,1.732,440,1.732,443,1.732,445,2.674,446,1.732,448,1.732,488,2.337,499,2.337,517,2.085,518,1.732,519,2.063,520,3.187,521,2.063,522,4.197,523,2.063,524,4.378,525,2.063,526,2.063,527,2.063,528,2.063,529,3.187,530,3.187,531,2.063,532,2.063,533,2.063,534,2.063,535,1.732,536,2.301,537,1.732,538,2.063,539,1.513,540,2.063,541,2.063,542,2.063,543,2.063,544,2.063,545,2.063,546,2.063,547,2.063,548,2.063,549,2.063,550,2.063,551,2.063,552,2.063]],["title/classes/UserDTO.html",[26,0.014,536,1.931]],["body/classes/UserDTO.html",[3,0.3,4,0.261,5,0.222,7,0.804,8,0.385,9,1.689,12,2.358,13,0.837,14,0.029,15,0.342,23,2.213,25,0.3,26,0.016,34,1.019,35,1.446,39,2.102,44,2.398,46,0.016,47,0.021,48,0.016,58,1.105,125,3.121,168,1.446,186,1.749,416,2.844,451,3.948,536,2.781,553,2.975,554,4.431,555,3.872,556,4.431,557,3.544,558,3.544,559,3.544,560,3.544,561,3.544,562,3.544,563,3.544,564,3.544,565,3.544]],["title/classes/UserEntity.html",[21,1.484,26,0.014]],["body/classes/UserEntity.html",[3,0.198,4,0.172,5,0.146,7,0.53,8,0.253,9,1.256,12,1.955,13,0.794,14,0.03,15,0.45,16,2.747,17,3.661,18,2.747,20,1.06,21,1.589,23,1.955,25,0.198,26,0.015,27,2.118,28,1.907,29,1.357,30,2.954,31,3.308,32,3.052,33,2.383,34,0.964,35,1.389,39,1.794,42,1.357,43,1.589,44,1.907,46,0.01,47,0.015,48,0.01,55,0.859,57,2.877,58,1.074,60,0.859,67,0.928,125,2.482,167,1.001,168,0.794,181,1.152,186,1.152,196,1.711,472,2.937,475,4.194,478,1.711,522,4.194,554,3.523,555,3.079,556,3.523,566,1.958,567,3.499,568,4.664,569,3.499,570,4.198,571,3.499,572,3.499,573,2.333,574,2.333,575,2.333,576,2.333,577,2.333,578,2.333,579,2.333,580,2.333,581,2.333,582,2.333,583,3.499,584,2.333,585,2.333,586,4.198,587,2.333,588,2.333,589,2.333,590,2.333,591,2.333,592,2.937,593,3.499,594,3.499,595,1.711,596,2.333,597,1.958,598,2.333,599,2.333,600,2.333,601,2.333,602,2.333,603,3.499,604,2.333,605,2.333,606,2.333]],["title/modules/UserModule.html",[69,1.173,84,1.76]],["body/modules/UserModule.html",[3,0.33,4,0.286,5,0.244,14,0.029,15,0.581,21,1.767,25,0.33,26,0.017,46,0.017,47,0.022,48,0.017,51,2.096,61,0.631,69,1.983,71,1.767,72,1.767,73,2.095,74,2.095,75,1.767,76,2.975,77,2.975,84,3.381,85,2.693,86,2.095,87,2.095,89,2.545,94,2.853,95,2.095,226,3.236,517,3.614,535,3.265,607,3.265,608,3.265,609,3.265,610,3.89,611,3.89,612,3.265,613,3.89]],["title/injectables/UserService.html",[153,0.579,226,1.613]],["body/injectables/UserService.html",[3,0.125,4,0.108,5,0.092,7,0.976,8,0.16,9,0.873,13,0.611,14,0.03,15,0.385,20,0.668,21,1.104,23,1.803,25,0.125,26,0.006,28,2.419,29,2.065,33,1.639,34,0.83,35,0.907,39,2.339,41,2.133,42,0.571,43,1.104,44,1.814,46,0.006,47,0.011,48,0.006,55,0.597,58,0.843,60,1.308,61,0.239,66,0.617,67,1.141,95,0.793,114,2.425,125,2.133,127,1.783,153,0.639,154,0.571,167,1.231,168,0.976,181,1.2,182,1.639,223,3.082,226,2.123,236,0.726,237,0.793,238,1.943,242,3.006,244,1.675,247,1.533,248,1.635,249,1.411,252,2.279,268,2.361,269,1.591,274,2.543,275,2.815,285,2.068,341,3.028,410,1.591,412,2.361,413,2.033,414,2.646,423,1.591,458,2.279,486,3.028,487,3.995,488,3.619,490,2.646,496,4.807,497,2.041,499,1.783,502,3.611,503,2.041,505,1.235,509,2.607,510,2.607,511,2.607,536,2.917,537,1.235,555,1.079,612,1.235,614,1.235,615,2.431,616,1.472,617,2.431,618,3.107,619,2.431,620,1.472,621,2.431,622,3.608,623,1.472,624,1.472,625,2.431,626,1.472,627,3.608,628,2.431,629,1.472,630,1.472,631,1.472,632,1.472,633,4.302,634,3.995,635,3.107,636,2.431,637,1.472,638,1.472,639,1.472,640,3.107,641,2.431]],["title/injectables/ValidatorPipe.html",[153,0.579,434,2.138]],["body/injectables/ValidatorPipe.html",[3,0.223,4,0.193,5,0.165,8,0.285,12,2.07,13,0.663,14,0.03,15,0.434,25,0.223,26,0.02,29,1.018,33,1.193,34,0.953,35,0.596,43,1.193,46,0.012,47,0.017,48,0.012,55,0.937,58,0.875,60,1.212,61,0.426,67,1.452,114,1.886,153,0.676,154,1.018,167,1.413,168,1.121,172,1.296,182,2.68,195,3.775,199,3.622,201,1.718,236,2.702,237,1.414,238,2.056,242,1.552,244,2.07,247,1.884,248,1.371,275,1.718,342,2.204,364,2.204,434,2.498,465,3.204,469,1.926,478,1.926,595,1.926,642,2.204,643,3.818,644,3.818,645,3.818,646,3.818,647,2.626,648,4.498,649,3.818,650,2.626,651,3.818,652,2.626,653,4.498,654,3.818,655,4.939,656,2.626,657,3.818,658,2.626,659,4.498,660,2.626,661,2.626,662,2.626,663,3.818,664,2.626,665,2.626,666,2.626,667,2.626,668,3.204,669,2.626,670,2.626,671,2.626,672,2.626,673,4.498,674,4.498,675,3.818,676,4.498,677,2.626,678,2.626,679,2.626,680,2.626,681,2.626,682,2.626,683,2.626,684,2.204,685,2.626]],["title/coverage.html",[686,3.266]],["body/coverage.html",[0,1.98,1,1.543,5,0.179,6,3.091,13,0.384,14,0.029,21,1.301,26,0.025,27,1.301,31,3.333,37,1.543,46,0.013,47,0.018,48,0.013,49,2.155,50,1.874,52,2.404,62,1.543,75,1.301,104,1.874,107,1.874,110,1.111,153,1.068,155,2.404,159,1.874,160,2.404,164,1.543,176,1.414,187,2.404,190,2.101,191,2.404,199,3.77,205,1.694,222,2.404,226,1.414,248,1.029,263,2.981,264,1.874,319,2.404,320,2.404,334,2.101,363,2.404,382,2.404,397,2.101,407,1.874,408,2.404,416,1.543,431,1.543,434,1.874,450,2.404,485,2.404,517,1.874,518,2.404,536,1.694,539,2.101,553,2.404,566,2.404,597,2.404,614,2.404,642,2.404,668,5.239,686,2.101,687,2.865,688,2.865,689,2.865,690,5.14,691,2.865,692,5.428,693,2.101,694,4.723,695,4.723,696,4.064,697,2.865,698,2.865,699,4.064,700,4.064,701,2.865,702,2.865,703,4.064,704,4.064,705,2.865,706,2.865,707,2.865,708,2.865,709,2.865,710,2.865,711,2.865,712,2.865,713,2.865,714,4.064,715,2.404,716,3.551,717,3.551,718,2.404,719,2.404,720,2.404,721,2.865,722,2.865,723,2.865]],["title/dependencies.html",[72,1.784,724,2.731]],["body/dependencies.html",[14,0.03,20,1.756,26,0.022,46,0.017,47,0.022,48,0.017,61,0.627,72,1.756,95,2.082,99,3.244,102,2.835,103,2.943,136,2.835,179,2.082,210,2.835,215,2.835,281,2.835,284,2.835,371,4.622,394,3.244,469,2.835,592,3.244,595,2.835,725,3.865,726,5.507,727,3.865,728,3.865,729,3.865,730,3.865,731,3.865,732,3.865,733,3.865,734,3.865,735,3.865,736,3.865,737,3.865,738,3.865,739,3.865,740,3.865,741,3.865,742,3.865,743,3.865,744,3.865,745,3.865,746,3.865,747,3.865,748,3.865,749,3.865,750,3.865,751,3.865,752,3.865,753,3.865,754,3.865,755,3.865,756,3.865]],["title/miscellaneous/functions.html",[757,1.471,758,3.297]],["body/miscellaneous/functions.html",[7,1.149,8,0.431,14,0.027,34,1.076,46,0.017,47,0.022,48,0.017,75,2.532,134,3.33,167,1.595,168,1.265,172,2.499,249,2.756,334,3.713,353,3.713,355,2.91,397,3.713,399,4.929,401,4.249,715,3.33,716,2.596,717,2.596,718,4.249,757,2.137,758,3.33,759,3.968,760,4.089,761,3.968,762,3.968,763,5.873,764,5.873,765,5.063,766,5.063,767,5.063,768,5.063,769,5.063,770,5.063,771,3.968]],["title/index.html",[8,0.296,772,2.731,773,2.731]],["body/index.html",[4,0.272,7,0.839,10,2.419,14,0.029,46,0.016,47,0.021,48,0.016,490,2.712,684,3.103,686,2.712,774,3.698,775,3.698,776,4.837,777,3.698,778,3.698,779,3.698,780,3.698,781,3.698,782,3.698,783,3.698,784,3.698,785,3.698,786,5.391,787,3.698,788,3.698,789,3.698,790,6.202,791,3.698,792,3.698,793,3.698,794,6.088,795,3.698,796,3.698,797,4.837,798,3.698,799,3.698,800,3.698,801,3.698,802,4.837,803,4.837,804,3.698,805,3.698,806,3.698,807,4.837,808,4.837,809,3.698,810,3.698,811,3.698,812,3.698,813,3.698,814,3.103,815,3.698,816,3.698,817,3.698,818,3.698,819,3.698,820,3.698,821,3.698,822,3.698,823,3.698,824,3.698,825,3.698,826,3.698,827,3.698,828,3.698,829,3.698,830,3.698]],["title/modules.html",[71,2.023]],["body/modules.html",[14,0.025,46,0.021,47,0.025,48,0.021,70,3.076,71,2.135,81,2.779,82,2.532,83,2.779,84,2.532,814,5.347,831,6.371,832,6.371,833,6.371]],["title/overview.html",[834,3.738]],["body/overview.html",[2,2.312,14,0.029,46,0.016,47,0.021,48,0.016,51,1.481,62,2.84,69,1.269,70,4.23,71,1.605,72,1.605,73,1.903,74,1.903,75,1.605,76,1.903,77,1.903,78,2.966,79,2.966,80,2.966,81,3.796,82,3.149,83,3.457,84,3.304,85,2.529,86,1.903,87,1.903,110,2.178,154,1.37,176,2.602,186,1.744,202,2.966,204,2.966,205,3.117,226,3.028,256,2.966,257,2.966,431,2.84,480,2.966,481,2.966,607,2.966,608,2.966,609,2.966,834,2.966,835,3.534,836,3.534,837,3.534,838,3.534,839,2.966]],["title/miscellaneous/typealiases.html",[757,1.471,840,3.928]],["body/miscellaneous/typealiases.html",[8,0.514,13,0.636,14,0.029,46,0.021,47,0.025,48,0.021,55,1.387,170,3.101,411,3.101,429,3.475,693,3.475,716,3.101,717,3.101,757,2.552,760,3.475,841,4.739,842,4.741,843,3.977,844,3.977,845,4.739,846,4.739]],["title/miscellaneous/variables.html",[757,1.471,847,3.297]],["body/miscellaneous/variables.html",[5,0.249,8,0.432,13,0.681,14,0.03,29,1.543,35,0.904,42,2.165,46,0.018,47,0.022,48,0.018,67,1.056,136,2.92,198,3.341,236,2.756,539,3.721,693,2.92,716,2.605,717,2.605,719,4.258,720,4.258,757,2.144,760,3.721,839,3.341,842,3.341,843,3.341,844,3.341,847,3.341,848,3.981,849,3.981,850,3.981,851,3.981,852,5.073,853,5.073,854,3.981,855,3.981,856,3.981,857,3.981,858,3.981,859,3.981,860,3.981,861,3.981,862,3.981,863,5.073,864,3.981]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"interfaces/Access.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"interfaces/RolAccess.html":{},"controllers/RolController.html":{},"classes/RolDTO.html":{},"classes/RolEntity.html":{},"modules/RolModule.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":668,"title":{},"body":{"injectables/ValidatorPipe.html":{},"coverage.html":{}}}],["0.1.12",{"_index":747,"title":{},"body":{"dependencies.html":{}}}],["0.10.0",{"_index":734,"title":{},"body":{"dependencies.html":{}}}],["0.2.18",{"_index":754,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":733,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":741,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":692,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":690,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":696,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":721,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":547,"title":{},"body":{"controllers/UserController.html":{}}}],["1.0.0",{"_index":744,"title":{},"body":{"dependencies.html":{}}}],["1.4.2",{"_index":738,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":695,"title":{},"body":{"coverage.html":{}}}],["1/13",{"_index":711,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":704,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":702,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":698,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":700,"title":{},"body":{"coverage.html":{}}}],["1/9",{"_index":709,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":605,"title":{},"body":{"classes/UserEntity.html":{}}}],["100",{"_index":31,"title":{},"body":{"interfaces/Access.html":{},"interfaces/RolAccess.html":{},"classes/RolEntity.html":{},"classes/UserEntity.html":{},"coverage.html":{}}}],["1024",{"_index":863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["11",{"_index":708,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":699,"title":{},"body":{"coverage.html":{}}}],["16.0.0",{"_index":725,"title":{},"body":{"dependencies.html":{}}}],["2.17.1",{"_index":740,"title":{},"body":{"dependencies.html":{}}}],["2.24.0",{"_index":737,"title":{},"body":{"dependencies.html":{}}}],["2.6.2",{"_index":749,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":714,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":697,"title":{},"body":{"coverage.html":{}}}],["25",{"_index":701,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":839,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["3.0.6",{"_index":732,"title":{},"body":{"dependencies.html":{}}}],["3.1.0",{"_index":730,"title":{},"body":{"dependencies.html":{}}}],["3.3.3",{"_index":756,"title":{},"body":{"dependencies.html":{}}}],["3/5",{"_index":691,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":703,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":836,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":742,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":753,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":835,"title":{},"body":{"overview.html":{}}}],["6",{"_index":838,"title":{},"body":{"overview.html":{}}}],["6.0.0",{"_index":726,"title":{},"body":{"dependencies.html":{}}}],["6.1.0",{"_index":728,"title":{},"body":{"dependencies.html":{}}}],["6.1.1",{"_index":727,"title":{},"body":{"dependencies.html":{}}}],["6.1.3",{"_index":731,"title":{},"body":{"dependencies.html":{}}}],["6.3.3",{"_index":750,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":597,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["60})@exclude",{"_index":578,"title":{},"body":{"classes/UserEntity.html":{}}}],["7",{"_index":710,"title":{},"body":{"coverage.html":{}}}],["7/7",{"_index":707,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":706,"title":{},"body":{"coverage.html":{}}}],["7d",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{}}}],["8.1.0",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["8/9",{"_index":713,"title":{},"body":{"coverage.html":{}}}],["87",{"_index":705,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":712,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":837,"title":{},"body":{"overview.html":{}}}],["__dirname",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["_auth",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["_config",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["_config.get('http_max_redirects",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["_config.get('http_timeout",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["_config.get('multer_dest",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["_config.get('token_secret",{"_index":218,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["_config.get('typeorm_database",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["_config.get('typeorm_host",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["_config.get('typeorm_password",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["_config.get('typeorm_port",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["_config.get('typeorm_syncrhonize",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["_config.get('typeorm_type",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["_config.get('typeorm_username",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["_jwt",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["_rols",{"_index":438,"title":{},"body":{"controllers/RolController.html":{}}}],["_users",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{}}}],["access",{"_index":1,"title":{"interfaces/Access.html":{}},"body":{"interfaces/Access.html":{},"interfaces/RolAccess.html":{},"classes/RolDTO.html":{},"classes/RolEntity.html":{},"coverage.html":{}}}],["accessors",{"_index":569,"title":{},"body":{"classes/UserEntity.html":{}}}],["accessos",{"_index":453,"title":{},"body":{"classes/RolDTO.html":{}}}],["active",{"_index":554,"title":{},"body":{"classes/UserDTO.html":{},"classes/UserEntity.html":{}}}],["ajax",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["aliases",{"_index":841,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["amazing",{"_index":815,"title":{},"body":{"index.html":{}}}],["angular",{"_index":785,"title":{},"body":{"index.html":{}}}],["api",{"_index":54,"title":{},"body":{"controllers/AppController.html":{},"controllers/RolController.html":{}}}],["api/auth",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["api/rol",{"_index":409,"title":{},"body":{"controllers/RolController.html":{}}}],["api/user",{"_index":519,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":792,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_filter",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":50,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":782,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":70,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":62,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argiment",{"_index":329,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["argumentmetadata",{"_index":655,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["argumentshost",{"_index":324,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["array",{"_index":677,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["async",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{}}}],["auth.controller",{"_index":211,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.dto",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["auth.service",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["auth.strategy",{"_index":212,"title":{},"body":{"modules/AuthModule.html":{}}}],["authcontroller",{"_index":159,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authdto",{"_index":164,"title":{"classes/AuthDTO.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["authguard",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RolController.html":{},"controllers/UserController.html":{}}}],["authmiddleware",{"_index":190,"title":{"injectables/AuthMiddleware.html":{}},"body":{"injectables/AuthMiddleware.html":{},"coverage.html":{}}}],["authmodule",{"_index":81,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":823,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":176,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authstrategy::validate",{"_index":381,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["await",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RolService.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{}}}],["backers",{"_index":816,"title":{},"body":{"index.html":{}}}],["ban",{"_index":675,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["bcrypt",{"_index":592,"title":{},"body":{"classes/UserEntity.html":{},"dependencies.html":{}}}],["bcrypt.comparesync(compare",{"_index":606,"title":{},"body":{"classes/UserEntity.html":{}}}],["bcrypt.hashsync(this.password",{"_index":604,"title":{},"body":{"classes/UserEntity.html":{}}}],["beforeinsert",{"_index":586,"title":{},"body":{"classes/UserEntity.html":{}}}],["body",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RolController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":12,"title":{},"body":{"interfaces/Access.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/RolAccess.html":{},"classes/RolDTO.html":{},"classes/RolEntity.html":{},"classes/UserDTO.html":{},"classes/UserEntity.html":{},"injectables/ValidatorPipe.html":{}}}],["bootstrap",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/RolModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":833,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":831,"title":{},"body":{"modules.html":{}}}],["building",{"_index":777,"title":{},"body":{"index.html":{}}}],["cadena",{"_index":462,"title":{},"body":{"classes/RolDTO.html":{}}}],["call",{"_index":386,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["call$.handle().pipe",{"_index":403,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["callhandler",{"_index":387,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["campos",{"_index":671,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["catch",{"_index":321,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["catch(exception",{"_index":323,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["catchs",{"_index":326,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["cb",{"_index":858,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cb(null",{"_index":859,"title":{},"body":{"miscellaneous/variables.html":{}}}],["class",{"_index":26,"title":{"classes/AuthDTO.html":{},"classes/HttpErrorFilter.html":{},"classes/RolDTO.html":{},"classes/RolEntity.html":{},"classes/UserDTO.html":{},"classes/UserEntity.html":{}},"body":{"interfaces/Access.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"interfaces/RolAccess.html":{},"controllers/RolController.html":{},"classes/RolDTO.html":{},"classes/RolEntity.html":{},"modules/RolModule.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":186,"title":{},"body":{"classes/AuthDTO.html":{},"classes/HttpErrorFilter.html":{},"classes/RolDTO.html":{},"classes/RolEntity.html":{},"classes/UserDTO.html":{},"classes/UserEntity.html":{},"overview.html":{}}}],["classname",{"_index":763,"title":{},"body":{"miscellaneous/functions.html":{}}}],["classserializerinterceptor",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["cluster_appmodule",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":203,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":204,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_configmodule",{"_index":256,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_configmodule_exports",{"_index":257,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_rolmodule",{"_index":480,"title":{},"body":{"modules/RolModule.html":{},"overview.html":{}}}],["cluster_rolmodule_providers",{"_index":481,"title":{},"body":{"modules/RolModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":607,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":608,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":609,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":349,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["column",{"_index":17,"title":{},"body":{"interfaces/Access.html":{},"interfaces/RolAccess.html":{},"classes/RolEntity.html":{},"classes/UserEntity.html":{}}}],["column({default",{"_index":472,"title":{},"body":{"classes/RolEntity.html":{},"classes/UserEntity.html":{}}}],["column({length",{"_index":475,"title":{},"body":{"classes/RolEntity.html":{},"classes/UserEntity.html":{}}}],["column({type",{"_index":470,"title":{},"body":{"classes/RolEntity.html":{}}}],["compare",{"_index":585,"title":{},"body":{"classes/UserEntity.html":{}}}],["comparepassword",{"_index":567,"title":{},"body":{"classes/UserEntity.html":{}}}],["comparepassword(compare",{"_index":583,"title":{},"body":{"classes/UserEntity.html":{}}}],["config",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["config.service",{"_index":259,"title":{},"body":{"modules/ConfigModule.html":{}}}],["config/config.module",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["config/config.service",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["config/constants",{"_index":540,"title":{},"body":{"controllers/UserController.html":{}}}],["configmodule",{"_index":82,"title":{"modules/ConfigModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["configservice",{"_index":110,"title":{"injectables/ConfigService.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["configservice(`${process.env.node_env",{"_index":261,"title":{},"body":{"modules/ConfigModule.html":{}}}],["const",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"injectables/RolService.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{}}}],["constructor",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/JwtStrategy.html":{},"injectables/RolService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["constructor(_auth",{"_index":365,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(_users",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(filepath",{"_index":266,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["constructor(partial",{"_index":571,"title":{},"body":{"classes/UserEntity.html":{}}}],["constructor(private",{"_index":65,"title":{},"body":{"controllers/AppController.html":{},"controllers/RolController.html":{},"controllers/UserController.html":{}}}],["constructor(reprol",{"_index":489,"title":{},"body":{"injectables/RolService.html":{}}}],["constructor(repuser",{"_index":616,"title":{},"body":{"injectables/UserService.html":{}}}],["context",{"_index":391,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["context.getclass().name",{"_index":405,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["context.gethandler().name",{"_index":406,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":398,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["controller",{"_index":49,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/RolController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/RolController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('api",{"_index":64,"title":{},"body":{"controllers/AppController.html":{}}}],["controller('api/auth",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('api/rol",{"_index":437,"title":{},"body":{"controllers/RolController.html":{}}}],["controller('api/user",{"_index":541,"title":{},"body":{"controllers/UserController.html":{}}}],["controller::get",{"_index":770,"title":{},"body":{"miscellaneous/functions.html":{}}}],["controllers",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/RolController.html":{},"modules/RolModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["core/**/*.entity{.ts,.js",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["core/auth/auth.module",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["core/rol/rol.module",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["core/user/user.module",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["coverage",{"_index":686,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":410,"title":{},"body":{"controllers/RolController.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":443,"title":{},"body":{"controllers/RolController.html":{},"controllers/UserController.html":{}}}],["create(rol",{"_index":415,"title":{},"body":{"controllers/RolController.html":{}}}],["create(user",{"_index":521,"title":{},"body":{"controllers/UserController.html":{}}}],["created",{"_index":486,"title":{},"body":{"injectables/RolService.html":{},"injectables/UserService.html":{}}}],["created(newrol",{"_index":493,"title":{},"body":{"injectables/RolService.html":{}}}],["created(newuser",{"_index":619,"title":{},"body":{"injectables/UserService.html":{}}}],["creates",{"_index":268,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/RolService.html":{},"injectables/UserService.html":{}}}],["credenciales",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["ctx",{"_index":337,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["ctx.getrequest",{"_index":339,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["ctx.getresponse",{"_index":340,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["data",{"_index":622,"title":{},"body":{"injectables/UserService.html":{}}}],["database",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"classes/HttpErrorFilter.html":{},"injectables/UserService.html":{}}}],["date().tolocaledatestring",{"_index":351,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["date.now",{"_index":402,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["dd/mm/yyyy",{"_index":848,"title":{},"body":{"miscellaneous/variables.html":{}}}],["declarations",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/RolModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":57,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/RolController.html":{},"classes/RolDTO.html":{},"classes/RolEntity.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{}}}],["default",{"_index":42,"title":{},"body":{"interfaces/Access.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/RolAccess.html":{},"classes/RolEntity.html":{},"injectables/RolService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":214,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":58,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"controllers/RolController.html":{},"classes/RolDTO.html":{},"classes/RolEntity.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{}}}],["delete",{"_index":411,"title":{},"body":{"controllers/RolController.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"miscellaneous/typealiases.html":{}}}],["delete(':id",{"_index":420,"title":{},"body":{"controllers/RolController.html":{},"controllers/UserController.html":{}}}],["delete(@param('id",{"_index":448,"title":{},"body":{"controllers/RolController.html":{},"controllers/UserController.html":{}}}],["delete(id",{"_index":419,"title":{},"body":{"controllers/RolController.html":{},"controllers/UserController.html":{}}}],["deleted",{"_index":487,"title":{},"body":{"injectables/RolService.html":{},"injectables/UserService.html":{}}}],["deleted(id",{"_index":497,"title":{},"body":{"injectables/RolService.html":{},"injectables/UserService.html":{}}}],["deletes",{"_index":499,"title":{},"body":{"injectables/RolService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dependencies",{"_index":72,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/RolModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/Access.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{},"interfaces/RolAccess.html":{},"controllers/RolController.html":{},"classes/RolDTO.html":{},"classes/RolEntity.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["dest",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["destination",{"_index":855,"title":{},"body":{"miscellaneous/variables.html":{}}}],["development",{"_index":793,"title":{},"body":{"index.html":{}}}],["development'}.env",{"_index":262,"title":{},"body":{"modules/ConfigModule.html":{}}}],["disabled",{"_index":44,"title":{},"body":{"interfaces/Access.html":{},"interfaces/RolAccess.html":{},"classes/RolDTO.html":{},"classes/RolEntity.html":{},"injectables/RolService.html":{},"classes/UserDTO.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["diskstorage",{"_index":854,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":687,"title":{},"body":{"coverage.html":{}}}],["dotenv",{"_index":281,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"dependencies.html":{}}}],["dotenv.parse(fs.readfilesync(filepath",{"_index":286,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["dto",{"_index":451,"title":{},"body":{"classes/RolDTO.html":{},"classes/UserDTO.html":{}}}],["e.constraints",{"_index":682,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["e.constraints[key",{"_index":683,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["e2e",{"_index":804,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":778,"title":{},"body":{"index.html":{}}}],["el",{"_index":458,"title":{},"body":{"classes/RolDTO.html":{},"injectables/RolService.html":{},"injectables/UserService.html":{}}}],["email",{"_index":555,"title":{},"body":{"classes/UserDTO.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["encontro",{"_index":510,"title":{},"body":{"injectables/RolService.html":{},"injectables/UserService.html":{}}}],["entities",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["entity",{"_index":16,"title":{},"body":{"interfaces/Access.html":{},"interfaces/RolAccess.html":{},"classes/RolEntity.html":{},"classes/UserEntity.html":{}}}],["entity('rol",{"_index":24,"title":{},"body":{"interfaces/Access.html":{},"interfaces/RolAccess.html":{},"classes/RolEntity.html":{}}}],["entity('user",{"_index":596,"title":{},"body":{"classes/UserEntity.html":{}}}],["env",{"_index":271,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["envconfig",{"_index":264,"title":{"interfaces/EnvConfig.html":{}},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"coverage.html":{}}}],["envvarsschema",{"_index":289,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["envvarsschema.validate",{"_index":312,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["error",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/RolService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["error(`config",{"_index":313,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["error.filter",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["error.filter.ts",{"_index":320,"title":{},"body":{"classes/HttpErrorFilter.html":{},"coverage.html":{}}}],["error.filter.ts:23",{"_index":325,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["error.message",{"_index":315,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["errorresponce",{"_index":348,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["errors",{"_index":648,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["errors.length",{"_index":667,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["es",{"_index":460,"title":{},"body":{"classes/RolDTO.html":{}}}],["exception",{"_index":328,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["exception.getstatus",{"_index":343,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["exception.message",{"_index":357,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["exception.message.error",{"_index":356,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["exception.message.where",{"_index":345,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["exception.stack",{"_index":361,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["exceptionfilter",{"_index":322,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["exclude",{"_index":593,"title":{},"body":{"classes/UserEntity.html":{}}}],["executioncontext",{"_index":385,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["exemple",{"_index":769,"title":{},"body":{"miscellaneous/functions.html":{}}}],["expiresin",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":25,"title":{},"body":{"interfaces/Access.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"interfaces/RolAccess.html":{},"controllers/RolController.html":{},"classes/RolDTO.html":{},"classes/RolEntity.html":{},"modules/RolModule.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{}}}],["exports",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/RolModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["expose",{"_index":594,"title":{},"body":{"classes/UserEntity.html":{}}}],["express",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["extends",{"_index":373,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":369,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":377,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":43,"title":{},"body":{"interfaces/Access.html":{},"injectables/JwtStrategy.html":{},"interfaces/RolAccess.html":{},"classes/RolEntity.html":{},"injectables/RolService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/Access.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"interfaces/RolAccess.html":{},"controllers/RolController.html":{},"classes/RolDTO.html":{},"classes/RolEntity.html":{},"modules/RolModule.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["filename",{"_index":857,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filepath",{"_index":270,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["files",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{}}}],["filesinterceptor",{"_index":538,"title":{},"body":{"controllers/UserController.html":{}}}],["filesinterceptor('photo",{"_index":546,"title":{},"body":{"controllers/UserController.html":{}}}],["filesize",{"_index":862,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filter",{"_index":327,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["filters/http",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["forin",{"_index":681,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["formaterror",{"_index":643,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["formaterror(errors",{"_index":646,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["formatlog",{"_index":719,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["framework",{"_index":776,"title":{},"body":{"index.html":{}}}],["fs",{"_index":282,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["fullname",{"_index":570,"title":{},"body":{"classes/UserEntity.html":{}}}],["func",{"_index":765,"title":{},"body":{"miscellaneous/functions.html":{}}}],["function",{"_index":199,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/ValidatorPipe.html":{},"coverage.html":{}}}],["functions",{"_index":758,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generates",{"_index":864,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generatestoragemulter",{"_index":539,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["generatestoragemulter('images",{"_index":548,"title":{},"body":{"controllers/UserController.html":{}}}],["get(':id",{"_index":424,"title":{},"body":{"controllers/RolController.html":{},"controllers/UserController.html":{}}}],["get(key",{"_index":272,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["getall",{"_index":412,"title":{},"body":{"controllers/RolController.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getfullname",{"_index":588,"title":{},"body":{"classes/UserEntity.html":{}}}],["gethello",{"_index":56,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getone",{"_index":413,"title":{},"body":{"controllers/RolController.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getone(@param('id",{"_index":440,"title":{},"body":{"controllers/RolController.html":{},"controllers/UserController.html":{}}}],["getone(id",{"_index":423,"title":{},"body":{"controllers/RolController.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getonebyuser",{"_index":615,"title":{},"body":{"injectables/UserService.html":{}}}],["getonebyuser(user",{"_index":628,"title":{},"body":{"injectables/UserService.html":{}}}],["gets",{"_index":274,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getting",{"_index":772,"title":{"index.html":{}},"body":{}}],["grow",{"_index":811,"title":{},"body":{"index.html":{}}}],["hapi/joi",{"_index":284,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"dependencies.html":{}}}],["heavily",{"_index":783,"title":{},"body":{"index.html":{}}}],["hello",{"_index":157,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":820,"title":{},"body":{"index.html":{}}}],["hh:mm:ss",{"_index":849,"title":{},"body":{"miscellaneous/variables.html":{}}}],["host",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/HttpErrorFilter.html":{}}}],["host.switchtohttp",{"_index":338,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["hostname",{"_index":400,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["http",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"classes/HttpErrorFilter.html":{}}}],["http_max_redirects",{"_index":309,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["http_timeout",{"_index":307,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["httpargumentshost",{"_index":332,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["httperrorfilter",{"_index":104,"title":{"classes/HttpErrorFilter.html":{}},"body":{"modules/AppModule.html":{},"classes/HttpErrorFilter.html":{},"coverage.html":{}}}],["httpexception",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/RolService.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{}}}],["httpexception('peticion",{"_index":661,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["httpmodule",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["httpmodule.registerasync",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["https://nestjs.com",{"_index":827,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/RolService.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{}}}],["httpstatus.bad_request",{"_index":663,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["httpstatus.internal_server_error",{"_index":344,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["httpstatus.not_found",{"_index":511,"title":{},"body":{"injectables/RolService.html":{},"injectables/UserService.html":{}}}],["httpstatus.unauthorized",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["id",{"_index":28,"title":{},"body":{"interfaces/Access.html":{},"interfaces/RolAccess.html":{},"controllers/RolController.html":{},"classes/RolEntity.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":688,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":378,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["images",{"_index":844,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["implements",{"_index":201,"title":{},"body":{"injectables/AuthMiddleware.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{},"injectables/ValidatorPipe.html":{}}}],["import",{"_index":15,"title":{},"body":{"interfaces/Access.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"interfaces/RolAccess.html":{},"controllers/RolController.html":{},"classes/RolDTO.html":{},"classes/RolEntity.html":{},"modules/RolModule.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{}}}],["imports",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"interfaces/Access.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"interfaces/RolAccess.html":{},"controllers/RolController.html":{},"classes/RolDTO.html":{},"classes/RolEntity.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":317,"title":{},"body":{"interfaces/EnvConfig.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/Access.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"interfaces/RolAccess.html":{},"controllers/RolController.html":{},"classes/RolDTO.html":{},"classes/RolEntity.html":{},"modules/RolModule.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{}}}],["inject",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["injectable",{"_index":153,"title":{"injectables/AppService.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"injectables/RolService.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"injectables/RolService.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{},"coverage.html":{}}}],["injectables",{"_index":154,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"injectables/RolService.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{},"overview.html":{}}}],["injectrepository",{"_index":505,"title":{},"body":{"injectables/RolService.html":{},"injectables/UserService.html":{}}}],["injectrepository(rolentity",{"_index":506,"title":{},"body":{"injectables/RolService.html":{}}}],["injectrepository(userentity",{"_index":631,"title":{},"body":{"injectables/UserService.html":{}}}],["input",{"_index":279,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["inspired",{"_index":784,"title":{},"body":{"index.html":{}}}],["installation",{"_index":789,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":791,"title":{},"body":{"index.html":{}}}],["instance",{"_index":269,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/RolService.html":{},"injectables/UserService.html":{}}}],["instanceof",{"_index":342,"title":{},"body":{"classes/HttpErrorFilter.html":{},"injectables/ValidatorPipe.html":{}}}],["intercept",{"_index":383,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["intercept(context",{"_index":384,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["interceptor",{"_index":390,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["interceptors/logger.interceptor",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["intercepts",{"_index":389,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["interface",{"_index":0,"title":{"interfaces/Access.html":{},"interfaces/EnvConfig.html":{},"interfaces/RolAccess.html":{}},"body":{"interfaces/Access.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/RolAccess.html":{},"classes/RolEntity.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/Access.html":{},"interfaces/EnvConfig.html":{},"interfaces/RolAccess.html":{},"overview.html":{}}}],["invalidas",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["invalidos",{"_index":454,"title":{},"body":{"classes/RolDTO.html":{}}}],["ip",{"_index":764,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isempty",{"_index":465,"title":{},"body":{"classes/RolDTO.html":{},"injectables/ValidatorPipe.html":{}}}],["isempty(value",{"_index":649,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["isjson",{"_index":468,"title":{},"body":{"classes/RolDTO.html":{}}}],["isnotempty",{"_index":467,"title":{},"body":{"classes/RolDTO.html":{}}}],["isnotempty({message",{"_index":452,"title":{},"body":{"classes/RolDTO.html":{}}}],["isstring",{"_index":466,"title":{},"body":{"classes/RolDTO.html":{}}}],["isstring({message",{"_index":457,"title":{},"body":{"classes/RolDTO.html":{}}}],["joi",{"_index":283,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.number().default(3000",{"_index":294,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.number().default(5",{"_index":310,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.number().default(5000",{"_index":308,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.number().required",{"_index":300,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.object",{"_index":291,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.objectschema",{"_index":290,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().default",{"_index":303,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().default('development",{"_index":293,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().required",{"_index":296,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["join",{"_index":684,"title":{},"body":{"injectables/ValidatorPipe.html":{},"index.html":{}}}],["json",{"_index":36,"title":{},"body":{"interfaces/Access.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/RolAccess.html":{},"classes/RolEntity.html":{}}}],["jsonwebtoken",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwt",{"_index":215,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":376,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":209,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":216,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":205,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":824,"title":{},"body":{"index.html":{}}}],["key",{"_index":275,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{}}}],["lastname",{"_index":556,"title":{},"body":{"classes/UserDTO.html":{},"classes/UserEntity.html":{}}}],["legend",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/RolModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":30,"title":{},"body":{"interfaces/Access.html":{},"interfaces/RolAccess.html":{},"classes/RolDTO.html":{},"classes/RolEntity.html":{},"classes/UserEntity.html":{}}}],["library",{"_index":346,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["license",{"_index":830,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":808,"title":{},"body":{"index.html":{}}}],["limits",{"_index":861,"title":{},"body":{"miscellaneous/variables.html":{}}}],["line",{"_index":674,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["local",{"_index":743,"title":{},"body":{"dependencies.html":{}}}],["logger",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{},"injectables/RolService.html":{},"injectables/ValidatorPipe.html":{},"miscellaneous/functions.html":{}}}],["logger.error",{"_index":359,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["logger.log",{"_index":404,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["logger.log(json.stringify(errors[0].constraints",{"_index":679,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["logger/personalogger",{"_index":336,"title":{},"body":{"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{}}}],["logger/personalogger.ts",{"_index":717,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["loggerinterceptor",{"_index":107,"title":{"injectables/LoggerInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggerInterceptor.html":{},"coverage.html":{}}}],["logging",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/functions.html":{}}}],["login",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(payload",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(user",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["maderas",{"_index":851,"title":{},"body":{"miscellaneous/variables.html":{}}}],["manytoone",{"_index":590,"title":{},"body":{"classes/UserEntity.html":{}}}],["manytoone((type",{"_index":598,"title":{},"body":{"classes/UserEntity.html":{}}}],["manytoone(undefined",{"_index":580,"title":{},"body":{"classes/UserEntity.html":{}}}],["map((e",{"_index":680,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["matching",{"_index":47,"title":{},"body":{"interfaces/Access.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"interfaces/RolAccess.html":{},"controllers/RolController.html":{},"classes/RolDTO.html":{},"classes/RolEntity.html":{},"modules/RolModule.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxredirects",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["maxsize",{"_index":852,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":355,"title":{},"body":{"classes/HttpErrorFilter.html":{},"classes/RolDTO.html":{},"miscellaneous/functions.html":{}}}],["metadata",{"_index":746,"title":{},"body":{"dependencies.html":{}}}],["metatype",{"_index":653,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["method",{"_index":353,"title":{},"body":{"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{},"miscellaneous/functions.html":{}}}],["methods",{"_index":55,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"controllers/RolController.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{},"miscellaneous/typealiases.html":{}}}],["miscellaneous",{"_index":757,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":807,"title":{},"body":{"index.html":{}}}],["mode",{"_index":797,"title":{},"body":{"index.html":{}}}],["module",{"_index":69,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/RolModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/RolModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":71,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/RolModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":736,"title":{},"body":{"dependencies.html":{}}}],["more",{"_index":819,"title":{},"body":{"index.html":{}}}],["multer",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["multer_dest",{"_index":306,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["multermodule",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["multermodule.registerasync",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["multermoduleasyncoptions",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["mysql",{"_index":739,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":825,"title":{},"body":{"index.html":{}}}],["name",{"_index":34,"title":{},"body":{"interfaces/Access.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"interfaces/RolAccess.html":{},"controllers/RolController.html":{},"classes/RolDTO.html":{},"classes/RolEntity.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{},"miscellaneous/functions.html":{}}}],["nameapp",{"_index":720,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["nest",{"_index":786,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":829,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":393,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["nestjs/common",{"_index":61,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"controllers/RolController.html":{},"modules/RolModule.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{},"dependencies.html":{}}}],["nestjs/common/interfaces",{"_index":333,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["nestjs/core",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":210,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"controllers/RolController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":729,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"modules/RolModule.html":{},"injectables/RolService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":200,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["new",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{},"coverage.html":{}}}],["newrol",{"_index":495,"title":{},"body":{"injectables/RolService.html":{}}}],["newuser",{"_index":621,"title":{},"body":{"injectables/UserService.html":{}}}],["next",{"_index":195,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/ValidatorPipe.html":{}}}],["node.js",{"_index":775,"title":{},"body":{"index.html":{}}}],["node_env",{"_index":292,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["nombre",{"_index":459,"title":{},"body":{"classes/RolDTO.html":{}}}],["now",{"_index":401,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"miscellaneous/functions.html":{}}}],["npm",{"_index":790,"title":{},"body":{"index.html":{}}}],["null",{"_index":358,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["number",{"_index":29,"title":{},"body":{"interfaces/Access.html":{},"interfaces/RolAccess.html":{},"controllers/RolController.html":{},"classes/RolEntity.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{},"miscellaneous/variables.html":{}}}],["o",{"_index":347,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["object",{"_index":659,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["object.assign(this",{"_index":600,"title":{},"body":{"classes/UserEntity.html":{}}}],["object.keys(value).length",{"_index":685,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["observable",{"_index":392,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["one",{"_index":502,"title":{},"body":{"injectables/RolService.html":{},"injectables/UserService.html":{}}}],["onetomany",{"_index":19,"title":{},"body":{"interfaces/Access.html":{},"interfaces/RolAccess.html":{},"classes/RolEntity.html":{}}}],["onetomany(type",{"_index":38,"title":{},"body":{"interfaces/Access.html":{},"interfaces/RolAccess.html":{},"classes/RolEntity.html":{}}}],["onetomany(undefined",{"_index":477,"title":{},"body":{"classes/RolEntity.html":{}}}],["open",{"_index":809,"title":{},"body":{"index.html":{}}}],["optional",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"controllers/RolController.html":{},"classes/RolDTO.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/RolModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":834,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":724,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":285,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{},"controllers/RolController.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["parameters",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"controllers/RolController.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":530,"title":{},"body":{"controllers/UserController.html":{}}}],["partial",{"_index":522,"title":{},"body":{"controllers/UserController.html":{},"classes/UserEntity.html":{}}}],["passport",{"_index":371,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":213,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":372,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":374,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthDTO.html":{},"classes/UserDTO.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["path",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"classes/HttpErrorFilter.html":{}}}],["path.join(__dirname",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["payload",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["pdfs",{"_index":845,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["personal",{"_index":335,"title":{},"body":{"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{}}}],["petitions",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["pipes/validator.pipe",{"_index":435,"title":{},"body":{"controllers/RolController.html":{}}}],["pipetransform",{"_index":657,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["plaintoclass",{"_index":658,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["plaintoclass(metatype",{"_index":665,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["please",{"_index":818,"title":{},"body":{"index.html":{}}}],["port",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["post",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RolController.html":{},"controllers/UserController.html":{},"miscellaneous/typealiases.html":{}}}],["post'|'get'|'put'|'delete",{"_index":767,"title":{},"body":{"miscellaneous/functions.html":{}}}],["post('login",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('photo",{"_index":545,"title":{},"body":{"controllers/UserController.html":{}}}],["post('photo')@useinterceptors(undefined",{"_index":532,"title":{},"body":{"controllers/UserController.html":{}}}],["post()@usepipes(validatorpipe",{"_index":417,"title":{},"body":{"controllers/RolController.html":{}}}],["posts",{"_index":524,"title":{},"body":{"controllers/UserController.html":{}}}],["prefix",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/RolController.html":{},"controllers/UserController.html":{}}}],["primarygeneratedcolumn",{"_index":18,"title":{},"body":{"interfaces/Access.html":{},"interfaces/RolAccess.html":{},"classes/RolEntity.html":{},"classes/UserEntity.html":{}}}],["private",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"injectables/RolService.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{}}}],["process.env.name_app",{"_index":850,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":799,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":774,"title":{},"body":{"index.html":{}}}],["project",{"_index":810,"title":{},"body":{"index.html":{}}}],["promise",{"_index":496,"title":{},"body":{"injectables/RolService.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":9,"title":{},"body":{"interfaces/Access.html":{},"classes/AuthDTO.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"interfaces/RolAccess.html":{},"classes/RolDTO.html":{},"classes/RolEntity.html":{},"injectables/RolService.html":{},"classes/UserDTO.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["provide",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{}}}],["providers",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/RolModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public/uploads/${type",{"_index":856,"title":{},"body":{"miscellaneous/variables.html":{}}}],["put",{"_index":429,"title":{},"body":{"controllers/RolController.html":{},"controllers/UserController.html":{},"miscellaneous/typealiases.html":{}}}],["put(':id",{"_index":445,"title":{},"body":{"controllers/RolController.html":{},"controllers/UserController.html":{}}}],["put(':id')@usepipes(validatorpipe",{"_index":427,"title":{},"body":{"controllers/RolController.html":{}}}],["puts",{"_index":529,"title":{},"body":{"controllers/UserController.html":{}}}],["read",{"_index":10,"title":{},"body":{"interfaces/Access.html":{},"interfaces/RolAccess.html":{},"classes/RolEntity.html":{},"index.html":{}}}],["readonly",{"_index":66,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"controllers/RolController.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["reflect",{"_index":745,"title":{},"body":{"dependencies.html":{}}}],["relations",{"_index":633,"title":{},"body":{"injectables/UserService.html":{}}}],["repository",{"_index":490,"title":{},"body":{"injectables/RolService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["reprol",{"_index":492,"title":{},"body":{"injectables/RolService.html":{}}}],["repuser",{"_index":618,"title":{},"body":{"injectables/UserService.html":{}}}],["req",{"_index":198,"title":{},"body":{"injectables/AuthMiddleware.html":{},"miscellaneous/variables.html":{}}}],["request",{"_index":330,"title":{},"body":{"classes/HttpErrorFilter.html":{},"injectables/LoggerInterceptor.html":{}}}],["request.connection.remoteaddress",{"_index":360,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["request.method",{"_index":354,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["request.url",{"_index":352,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["res",{"_index":194,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["reset",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/RolModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":331,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["response.status(status).json(errorresponce",{"_index":362,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["result",{"_index":46,"title":{},"body":{"interfaces/Access.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"interfaces/RolAccess.html":{},"controllers/RolController.html":{},"classes/RolDTO.html":{},"classes/RolEntity.html":{},"modules/RolModule.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":48,"title":{},"body":{"interfaces/Access.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"interfaces/RolAccess.html":{},"controllers/RolController.html":{},"classes/RolDTO.html":{},"classes/RolEntity.html":{},"modules/RolModule.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":67,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"controllers/RolController.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":60,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"controllers/RolController.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{}}}],["rimraf",{"_index":748,"title":{},"body":{"dependencies.html":{}}}],["rol",{"_index":23,"title":{},"body":{"interfaces/Access.html":{},"interfaces/RolAccess.html":{},"controllers/RolController.html":{},"classes/RolDTO.html":{},"classes/RolEntity.html":{},"injectables/RolService.html":{},"classes/UserDTO.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["rol.controller",{"_index":483,"title":{},"body":{"modules/RolModule.html":{}}}],["rol.dto",{"_index":433,"title":{},"body":{"controllers/RolController.html":{},"injectables/RolService.html":{}}}],["rol.entity",{"_index":464,"title":{},"body":{"classes/RolDTO.html":{},"modules/RolModule.html":{},"injectables/RolService.html":{}}}],["rol.service",{"_index":432,"title":{},"body":{"controllers/RolController.html":{},"modules/RolModule.html":{}}}],["rol.users",{"_index":599,"title":{},"body":{"classes/UserEntity.html":{}}}],["rol/rol.dto",{"_index":565,"title":{},"body":{"classes/UserDTO.html":{}}}],["rol/rol.entity",{"_index":591,"title":{},"body":{"classes/UserEntity.html":{}}}],["rolaccess",{"_index":37,"title":{"interfaces/RolAccess.html":{}},"body":{"interfaces/Access.html":{},"interfaces/RolAccess.html":{},"classes/RolDTO.html":{},"classes/RolEntity.html":{},"coverage.html":{}}}],["rolcontroller",{"_index":407,"title":{"controllers/RolController.html":{}},"body":{"controllers/RolController.html":{},"modules/RolModule.html":{},"coverage.html":{}}}],["roldto",{"_index":416,"title":{"classes/RolDTO.html":{}},"body":{"controllers/RolController.html":{},"classes/RolDTO.html":{},"injectables/RolService.html":{},"classes/UserDTO.html":{},"coverage.html":{}}}],["rolentity",{"_index":27,"title":{"classes/RolEntity.html":{}},"body":{"interfaces/Access.html":{},"interfaces/RolAccess.html":{},"classes/RolEntity.html":{},"modules/RolModule.html":{},"injectables/RolService.html":{},"classes/UserEntity.html":{},"coverage.html":{}}}],["rolmodule",{"_index":83,"title":{"modules/RolModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RolModule.html":{},"modules.html":{},"overview.html":{}}}],["rols",{"_index":45,"title":{},"body":{"interfaces/Access.html":{},"interfaces/RolAccess.html":{},"classes/RolEntity.html":{}}}],["rolservice",{"_index":431,"title":{"injectables/RolService.html":{}},"body":{"controllers/RolController.html":{},"modules/RolModule.html":{},"injectables/RolService.html":{},"coverage.html":{},"overview.html":{}}}],["rolupdated",{"_index":514,"title":{},"body":{"injectables/RolService.html":{}}}],["route",{"_index":768,"title":{},"body":{"miscellaneous/functions.html":{}}}],["run",{"_index":794,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":394,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":396,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["scalable",{"_index":779,"title":{},"body":{"index.html":{}}}],["se",{"_index":509,"title":{},"body":{"injectables/RolService.html":{},"injectables/UserService.html":{}}}],["secret",{"_index":217,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":379,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["serched",{"_index":627,"title":{},"body":{"injectables/UserService.html":{}}}],["server",{"_index":780,"title":{},"body":{"index.html":{}}}],["service",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/RolService.html":{},"injectables/UserService.html":{}}}],["setpassword",{"_index":568,"title":{},"body":{"classes/UserEntity.html":{}}}],["side",{"_index":781,"title":{},"body":{"index.html":{}}}],["sign",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":219,"title":{},"body":{"modules/AuthModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/Access.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"interfaces/RolAccess.html":{},"controllers/RolController.html":{},"classes/RolDTO.html":{},"classes/RolEntity.html":{},"modules/RolModule.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{},"index.html":{}}}],["sponsors",{"_index":813,"title":{},"body":{"index.html":{}}}],["src/.../constants.ts",{"_index":843,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":759,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../personalogger.ts",{"_index":760,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":59,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":155,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":156,"title":{},"body":{"injectables/AppService.html":{}}}],["src/config/config.module.ts",{"_index":258,"title":{},"body":{"modules/ConfigModule.html":{}}}],["src/config/config.service.ts",{"_index":263,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"coverage.html":{}}}],["src/config/config.service.ts:12",{"_index":267,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/config/config.service.ts:28",{"_index":277,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/config/config.service.ts:6",{"_index":318,"title":{},"body":{"interfaces/EnvConfig.html":{}}}],["src/config/config.service.ts:60",{"_index":273,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/config/constants.ts",{"_index":693,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/core/auth/auth.controller.ts",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/core/auth/auth.controller.ts:14",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/core/auth/auth.dto.ts",{"_index":187,"title":{},"body":{"classes/AuthDTO.html":{},"coverage.html":{}}}],["src/core/auth/auth.dto.ts:2",{"_index":189,"title":{},"body":{"classes/AuthDTO.html":{}}}],["src/core/auth/auth.dto.ts:3",{"_index":188,"title":{},"body":{"classes/AuthDTO.html":{}}}],["src/core/auth/auth.module.ts",{"_index":206,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/core/auth/auth.service.ts",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/core/auth/auth.service.ts:13",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/core/auth/auth.service.ts:19",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/core/auth/auth.service.ts:24",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/core/auth/auth.strategy.ts",{"_index":363,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/core/auth/auth.strategy.ts:22",{"_index":368,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/core/auth/auth.strategy.ts:9",{"_index":366,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/core/rol/rol.controller.ts",{"_index":408,"title":{},"body":{"controllers/RolController.html":{},"coverage.html":{}}}],["src/core/rol/rol.controller.ts:17",{"_index":422,"title":{},"body":{"controllers/RolController.html":{}}}],["src/core/rol/rol.controller.ts:21",{"_index":425,"title":{},"body":{"controllers/RolController.html":{}}}],["src/core/rol/rol.controller.ts:26",{"_index":418,"title":{},"body":{"controllers/RolController.html":{}}}],["src/core/rol/rol.controller.ts:31",{"_index":428,"title":{},"body":{"controllers/RolController.html":{}}}],["src/core/rol/rol.controller.ts:36",{"_index":421,"title":{},"body":{"controllers/RolController.html":{}}}],["src/core/rol/rol.dto.ts",{"_index":450,"title":{},"body":{"classes/RolDTO.html":{},"coverage.html":{}}}],["src/core/rol/rol.dto.ts:12",{"_index":455,"title":{},"body":{"classes/RolDTO.html":{}}}],["src/core/rol/rol.dto.ts:14",{"_index":456,"title":{},"body":{"classes/RolDTO.html":{}}}],["src/core/rol/rol.dto.ts:9",{"_index":463,"title":{},"body":{"classes/RolDTO.html":{}}}],["src/core/rol/rol.entity.ts",{"_index":6,"title":{},"body":{"interfaces/Access.html":{},"interfaces/RolAccess.html":{},"classes/RolEntity.html":{},"coverage.html":{}}}],["src/core/rol/rol.entity.ts:10",{"_index":474,"title":{},"body":{"classes/RolEntity.html":{}}}],["src/core/rol/rol.entity.ts:13",{"_index":476,"title":{},"body":{"classes/RolEntity.html":{}}}],["src/core/rol/rol.entity.ts:16",{"_index":471,"title":{},"body":{"classes/RolEntity.html":{}}}],["src/core/rol/rol.entity.ts:19",{"_index":479,"title":{},"body":{"classes/RolEntity.html":{}}}],["src/core/rol/rol.entity.ts:22",{"_index":473,"title":{},"body":{"classes/RolEntity.html":{}}}],["src/core/rol/rol.module.ts",{"_index":482,"title":{},"body":{"modules/RolModule.html":{}}}],["src/core/rol/rol.service.ts",{"_index":485,"title":{},"body":{"injectables/RolService.html":{},"coverage.html":{}}}],["src/core/rol/rol.service.ts:12",{"_index":491,"title":{},"body":{"injectables/RolService.html":{}}}],["src/core/rol/rol.service.ts:25",{"_index":500,"title":{},"body":{"injectables/RolService.html":{}}}],["src/core/rol/rol.service.ts:34",{"_index":501,"title":{},"body":{"injectables/RolService.html":{}}}],["src/core/rol/rol.service.ts:45",{"_index":494,"title":{},"body":{"injectables/RolService.html":{}}}],["src/core/rol/rol.service.ts:57",{"_index":504,"title":{},"body":{"injectables/RolService.html":{}}}],["src/core/rol/rol.service.ts:69",{"_index":498,"title":{},"body":{"injectables/RolService.html":{}}}],["src/core/user/user.controller.ts",{"_index":518,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/core/user/user.controller.ts:32",{"_index":526,"title":{},"body":{"controllers/UserController.html":{}}}],["src/core/user/user.controller.ts:41",{"_index":527,"title":{},"body":{"controllers/UserController.html":{}}}],["src/core/user/user.controller.ts:50",{"_index":523,"title":{},"body":{"controllers/UserController.html":{}}}],["src/core/user/user.controller.ts:62",{"_index":533,"title":{},"body":{"controllers/UserController.html":{}}}],["src/core/user/user.controller.ts:72",{"_index":528,"title":{},"body":{"controllers/UserController.html":{}}}],["src/core/user/user.controller.ts:82",{"_index":525,"title":{},"body":{"controllers/UserController.html":{}}}],["src/core/user/user.dto.ts",{"_index":553,"title":{},"body":{"classes/UserDTO.html":{},"coverage.html":{}}}],["src/core/user/user.dto.ts:10",{"_index":562,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/core/user/user.dto.ts:11",{"_index":560,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/core/user/user.dto.ts:12",{"_index":563,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/core/user/user.dto.ts:13",{"_index":557,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/core/user/user.dto.ts:14",{"_index":558,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/core/user/user.dto.ts:7",{"_index":561,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/core/user/user.dto.ts:8",{"_index":564,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/core/user/user.dto.ts:9",{"_index":559,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/core/user/user.entity.ts",{"_index":566,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/core/user/user.entity.ts:17",{"_index":575,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/core/user/user.entity.ts:20",{"_index":577,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/core/user/user.entity.ts:23",{"_index":582,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/core/user/user.entity.ts:26",{"_index":574,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/core/user/user.entity.ts:30",{"_index":579,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/core/user/user.entity.ts:33",{"_index":576,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/core/user/user.entity.ts:36",{"_index":581,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/core/user/user.entity.ts:39",{"_index":573,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/core/user/user.entity.ts:42",{"_index":572,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/core/user/user.entity.ts:49",{"_index":589,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/core/user/user.entity.ts:54",{"_index":587,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/core/user/user.entity.ts:58",{"_index":584,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/core/user/user.module.ts",{"_index":610,"title":{},"body":{"modules/UserModule.html":{}}}],["src/core/user/user.service.ts",{"_index":614,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/core/user/user.service.ts:114",{"_index":623,"title":{},"body":{"injectables/UserService.html":{}}}],["src/core/user/user.service.ts:13",{"_index":617,"title":{},"body":{"injectables/UserService.html":{}}}],["src/core/user/user.service.ts:27",{"_index":624,"title":{},"body":{"injectables/UserService.html":{}}}],["src/core/user/user.service.ts:39",{"_index":626,"title":{},"body":{"injectables/UserService.html":{}}}],["src/core/user/user.service.ts:61",{"_index":629,"title":{},"body":{"injectables/UserService.html":{}}}],["src/core/user/user.service.ts:74",{"_index":620,"title":{},"body":{"injectables/UserService.html":{}}}],["src/core/user/user.service.ts:91",{"_index":630,"title":{},"body":{"injectables/UserService.html":{}}}],["src/filters/http",{"_index":319,"title":{},"body":{"classes/HttpErrorFilter.html":{},"coverage.html":{}}}],["src/interceptors/logger.interceptor.ts",{"_index":382,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"coverage.html":{}}}],["src/interceptors/logger.interceptor.ts:24",{"_index":388,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["src/main.ts",{"_index":715,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/middlewares/auth.middleware.ts",{"_index":191,"title":{},"body":{"injectables/AuthMiddleware.html":{},"coverage.html":{}}}],["src/middlewares/auth.middleware.ts:5",{"_index":197,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["src/personal",{"_index":716,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/pipes/validator.pipe.ts",{"_index":642,"title":{},"body":{"injectables/ValidatorPipe.html":{},"coverage.html":{}}}],["src/pipes/validator.pipe.ts:14",{"_index":656,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["src/pipes/validator.pipe.ts:33",{"_index":652,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["src/pipes/validator.pipe.ts:39",{"_index":647,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["src/pipes/validator.pipe.ts:50",{"_index":650,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["start",{"_index":795,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":798,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":800,"title":{},"body":{"index.html":{}}}],["started",{"_index":773,"title":{"index.html":{}},"body":{}}],["starter",{"_index":788,"title":{},"body":{"index.html":{}}}],["statements",{"_index":689,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":341,"title":{},"body":{"classes/HttpErrorFilter.html":{},"injectables/UserService.html":{}}}],["stay",{"_index":821,"title":{},"body":{"index.html":{}}}],["storage",{"_index":853,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strategy",{"_index":370,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":35,"title":{},"body":{"interfaces/Access.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AuthDTO.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/HttpErrorFilter.html":{},"interfaces/RolAccess.html":{},"classes/RolDTO.html":{},"classes/RolEntity.html":{},"injectables/RolService.html":{},"classes/UserDTO.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":375,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":814,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":832,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":751,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":723,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":722,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":395,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["test",{"_index":803,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":806,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":805,"title":{},"body":{"index.html":{}}}],["tests",{"_index":802,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":812,"title":{},"body":{"index.html":{}}}],["this._auth.login(user",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["this._auth.validateuser(payload",{"_index":380,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this._jwt.sign",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["this._rols.created(rol",{"_index":444,"title":{},"body":{"controllers/RolController.html":{}}}],["this._rols.deleted(id",{"_index":449,"title":{},"body":{"controllers/RolController.html":{}}}],["this._rols.getall",{"_index":439,"title":{},"body":{"controllers/RolController.html":{}}}],["this._rols.getone(id",{"_index":441,"title":{},"body":{"controllers/RolController.html":{}}}],["this._rols.updated(id",{"_index":447,"title":{},"body":{"controllers/RolController.html":{}}}],["this._users.created(user",{"_index":544,"title":{},"body":{"controllers/UserController.html":{}}}],["this._users.deleted(id",{"_index":552,"title":{},"body":{"controllers/UserController.html":{}}}],["this._users.getall",{"_index":542,"title":{},"body":{"controllers/UserController.html":{}}}],["this._users.getone(id",{"_index":543,"title":{},"body":{"controllers/UserController.html":{}}}],["this._users.getonebyuser(payload.user",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["this._users.getonebyuser(user.user",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["this._users.updated(id",{"_index":551,"title":{},"body":{"controllers/UserController.html":{}}}],["this.appservice.gethello",{"_index":68,"title":{},"body":{"controllers/AppController.html":{}}}],["this.envconfig",{"_index":287,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["this.envconfig[key",{"_index":316,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["this.formaterror(errors",{"_index":672,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["this.isempty(value",{"_index":660,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["this.lastname",{"_index":602,"title":{},"body":{"classes/UserEntity.html":{}}}],["this.name",{"_index":601,"title":{},"body":{"classes/UserEntity.html":{}}}],["this.password",{"_index":603,"title":{},"body":{"classes/UserEntity.html":{}}}],["this.reprol.create(newrol",{"_index":512,"title":{},"body":{"injectables/RolService.html":{}}}],["this.reprol.find",{"_index":507,"title":{},"body":{"injectables/RolService.html":{}}}],["this.reprol.findone",{"_index":508,"title":{},"body":{"injectables/RolService.html":{}}}],["this.reprol.save(rol",{"_index":513,"title":{},"body":{"injectables/RolService.html":{}}}],["this.reprol.update",{"_index":515,"title":{},"body":{"injectables/RolService.html":{}}}],["this.repuser.create(newuser",{"_index":637,"title":{},"body":{"injectables/UserService.html":{}}}],["this.repuser.find",{"_index":632,"title":{},"body":{"injectables/UserService.html":{}}}],["this.repuser.findone",{"_index":634,"title":{},"body":{"injectables/UserService.html":{}}}],["this.repuser.save(user",{"_index":638,"title":{},"body":{"injectables/UserService.html":{}}}],["this.repuser.update",{"_index":641,"title":{},"body":{"injectables/UserService.html":{}}}],["this.service",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolService.html":{},"injectables/UserService.html":{}}}],["this.service+'::deleted",{"_index":516,"title":{},"body":{"injectables/RolService.html":{}}}],["this.tovalidate(metatype",{"_index":664,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["this.validateinput(config",{"_index":288,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["throw",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"injectables/RolService.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{}}}],["timeout",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["timestamps",{"_index":350,"title":{},"body":{"classes/HttpErrorFilter.html":{}}}],["token",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["token_secret",{"_index":295,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["touch",{"_index":822,"title":{},"body":{"index.html":{}}}],["tovalidate",{"_index":644,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["tovalidate(metatype",{"_index":651,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["transform",{"_index":645,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["transform(value",{"_index":654,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["transformer",{"_index":595,"title":{},"body":{"classes/UserEntity.html":{},"injectables/ValidatorPipe.html":{},"dependencies.html":{}}}],["true",{"_index":33,"title":{},"body":{"interfaces/Access.html":{},"modules/AppModule.html":{},"interfaces/RolAccess.html":{},"classes/RolEntity.html":{},"injectables/RolService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{}}}],["tslint:disable",{"_index":673,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["tus",{"_index":670,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["twitter",{"_index":828,"title":{},"body":{"index.html":{}}}],["type",{"_index":13,"title":{},"body":{"interfaces/Access.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"classes/HttpErrorFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerInterceptor.html":{},"interfaces/RolAccess.html":{},"controllers/RolController.html":{},"classes/RolDTO.html":{},"classes/RolEntity.html":{},"injectables/RolService.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":840,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":20,"title":{},"body":{"interfaces/Access.html":{},"modules/AppModule.html":{},"interfaces/RolAccess.html":{},"classes/RolEntity.html":{},"injectables/RolService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeorm_database",{"_index":304,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["typeorm_host",{"_index":298,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["typeorm_password",{"_index":302,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["typeorm_port",{"_index":299,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["typeorm_syncrhonize",{"_index":305,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["typeorm_type",{"_index":297,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["typeorm_username",{"_index":301,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["typeormmodule",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"modules/RolModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([rolentity",{"_index":484,"title":{},"body":{"modules/RolModule.html":{}}}],["typeormmodule.forfeature([userentity",{"_index":613,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":676,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["types.includes(metatype",{"_index":678,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["typescript",{"_index":787,"title":{},"body":{"index.html":{}}}],["ui",{"_index":752,"title":{},"body":{"dependencies.html":{}}}],["un",{"_index":625,"title":{},"body":{"injectables/UserService.html":{}}}],["una",{"_index":461,"title":{},"body":{"classes/RolDTO.html":{}}}],["undefined",{"_index":478,"title":{},"body":{"classes/RolEntity.html":{},"classes/UserEntity.html":{},"injectables/ValidatorPipe.html":{}}}],["unique",{"_index":32,"title":{},"body":{"interfaces/Access.html":{},"interfaces/RolAccess.html":{},"classes/RolEntity.html":{},"classes/UserEntity.html":{}}}],["unit",{"_index":801,"title":{},"body":{"index.html":{}}}],["update",{"_index":414,"title":{},"body":{"controllers/RolController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(@param('id",{"_index":446,"title":{},"body":{"controllers/RolController.html":{},"controllers/UserController.html":{}}}],["update(id",{"_index":426,"title":{},"body":{"controllers/RolController.html":{},"controllers/UserController.html":{}}}],["updated",{"_index":488,"title":{},"body":{"injectables/RolService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updated(id",{"_index":503,"title":{},"body":{"injectables/RolService.html":{},"injectables/UserService.html":{}}}],["upload",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["uploadedfiles",{"_index":534,"title":{},"body":{"controllers/UserController.html":{}}}],["uploadphoto",{"_index":520,"title":{},"body":{"controllers/UserController.html":{}}}],["uploadphoto(@uploadedfiles",{"_index":549,"title":{},"body":{"controllers/UserController.html":{}}}],["uploadphoto(files",{"_index":531,"title":{},"body":{"controllers/UserController.html":{}}}],["uploads",{"_index":842,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["url",{"_index":399,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"miscellaneous/functions.html":{}}}],["use",{"_index":192,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["use(req",{"_index":193,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["useclass",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RolController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard('jwt",{"_index":436,"title":{},"body":{"controllers/RolController.html":{},"controllers/UserController.html":{}}}],["useinterceptors",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["usepipes",{"_index":430,"title":{},"body":{"controllers/RolController.html":{}}}],["usepipes(validatorpipe",{"_index":442,"title":{},"body":{"controllers/RolController.html":{}}}],["user",{"_index":39,"title":{},"body":{"interfaces/Access.html":{},"controllers/AuthController.html":{},"classes/AuthDTO.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/RolAccess.html":{},"classes/RolEntity.html":{},"controllers/UserController.html":{},"classes/UserDTO.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["user.comparepassword(payload.password",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.controller",{"_index":611,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":537,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.entity",{"_index":612,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.id",{"_index":639,"title":{},"body":{"injectables/UserService.html":{}}}],["user.rol",{"_index":40,"title":{},"body":{"interfaces/Access.html":{},"interfaces/RolAccess.html":{},"classes/RolEntity.html":{}}}],["user.service",{"_index":535,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.entity",{"_index":22,"title":{},"body":{"interfaces/Access.html":{},"interfaces/RolAccess.html":{},"classes/RolEntity.html":{}}}],["user/user.module",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{}}}],["user/user.service",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["usercontroller",{"_index":517,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdto",{"_index":536,"title":{"classes/UserDTO.html":{}},"body":{"controllers/UserController.html":{},"classes/UserDTO.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userentity",{"_index":21,"title":{"classes/UserEntity.html":{}},"body":{"interfaces/Access.html":{},"interfaces/RolAccess.html":{},"classes/RolEntity.html":{},"classes/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userfinded",{"_index":636,"title":{},"body":{"injectables/UserService.html":{}}}],["usermodule",{"_index":84,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["users",{"_index":41,"title":{},"body":{"interfaces/Access.html":{},"interfaces/RolAccess.html":{},"classes/RolEntity.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userservice",{"_index":226,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userupdated",{"_index":640,"title":{},"body":{"injectables/UserService.html":{}}}],["usevalue",{"_index":260,"title":{},"body":{"modules/ConfigModule.html":{}}}],["usuario",{"_index":635,"title":{},"body":{"injectables/UserService.html":{}}}],["uuid",{"_index":755,"title":{},"body":{"dependencies.html":{}}}],["uuid()}${extname(file.originalname",{"_index":860,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vacia",{"_index":662,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["validadion",{"_index":280,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["validate",{"_index":364,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/ValidatorPipe.html":{}}}],["validate(object",{"_index":666,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["validate(payload",{"_index":367,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatedenvconfig",{"_index":311,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["validateinput",{"_index":265,"title":{},"body":{"injectables/ConfigService.html":{}}}],["validateinput(envconfig",{"_index":276,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["validates",{"_index":278,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["validateuser",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(undefined",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":314,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["validator",{"_index":469,"title":{},"body":{"classes/RolDTO.html":{},"injectables/ValidatorPipe.html":{},"dependencies.html":{}}}],["validatorpipe",{"_index":434,"title":{"injectables/ValidatorPipe.html":{}},"body":{"controllers/RolController.html":{},"injectables/ValidatorPipe.html":{},"coverage.html":{}}}],["value",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/RolService.html":{},"injectables/UserService.html":{},"injectables/ValidatorPipe.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":694,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":847,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifica",{"_index":669,"title":{},"body":{"injectables/ValidatorPipe.html":{}}}],["void",{"_index":196,"title":{},"body":{"injectables/AuthMiddleware.html":{},"classes/HttpErrorFilter.html":{},"classes/UserEntity.html":{}}}],["watch",{"_index":796,"title":{},"body":{"index.html":{}}}],["website",{"_index":826,"title":{},"body":{"index.html":{}}}],["world",{"_index":158,"title":{},"body":{"injectables/AppService.html":{}}}],["write",{"_index":11,"title":{},"body":{"interfaces/Access.html":{},"interfaces/RolAccess.html":{},"classes/RolEntity.html":{}}}],["writefilelog",{"_index":718,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["writefilelog(logging",{"_index":761,"title":{},"body":{"miscellaneous/functions.html":{}}}],["writelogger",{"_index":397,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["writelogger(method",{"_index":762,"title":{},"body":{"miscellaneous/functions.html":{}}}],["writeloggererror",{"_index":334,"title":{},"body":{"classes/HttpErrorFilter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["writeloggererror(method",{"_index":771,"title":{},"body":{"miscellaneous/functions.html":{}}}],["writes",{"_index":766,"title":{},"body":{"miscellaneous/functions.html":{}}}],["xlsx",{"_index":846,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["yes",{"_index":550,"title":{},"body":{"controllers/UserController.html":{}}}],["you'd",{"_index":817,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/RolModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/Access.html":{"url":"interfaces/Access.html","title":"interface - Access","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Access\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/rol/rol.entity.ts\n        \n\n            \n                Description\n            \n            \n                Access\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        read\n                                \n                                \n                                        write\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        read\n                                    \n                                \n                                \n                                    \n                                        read:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        write\n                                    \n                                \n                                \n                                    \n                                        write:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, OneToMany } from 'typeorm';\nimport { UserEntity } from '../user/user.entity';\n\n/**\n * Entity  rol\n */\n@Entity('rol')\nexport class RolEntity {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({ length: 100, unique: true })\n    name: string;\n\n    @Column({ type: 'json' })\n    access: RolAccess\n\n    @OneToMany(type => UserEntity, user => user.rol)\n    users: UserEntity[]\n\n    @Column({ default: false })\n    disabled: boolean;\n}\n\n/**\n * Access\n */\nexport interface Access {\n    read: boolean;\n    write: boolean;\n}\n\n/**\n * Rol access\n */\nexport interface RolAccess {\n    users: Access\n    rols: Access\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller('api')\nexport class AppController {\n  constructor(private readonly appService: AppService) { }\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nRolModule\n\nRolModule\n\nAppModule -->\n\nRolModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ConfigModule\n                        \n                        \n                            RolModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, HttpModule } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserModule } from './core/user/user.module';\nimport { AuthModule } from './core/auth/auth.module';\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { RolModule } from './core/rol/rol.module';\nimport { APP_FILTER, APP_INTERCEPTOR } from '@nestjs/core';\nimport { MulterModule, MulterModuleAsyncOptions } from '@nestjs/platform-express';\nimport { HttpErrorFilter } from './filters/http-error.filter';\nimport { LoggerInterceptor } from './interceptors/logger.interceptor';\nimport { ConfigModule } from './config/config.module';\nimport { ConfigService } from './config/config.service';\nimport * as path from 'path'\n\n/**\n * Module\n */\n@Module({\n  imports: [\n    // Typeorm  config async\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (_config: ConfigService) => ({\n        type: _config.get('TYPEORM_TYPE'),\n        host: _config.get('TYPEORM_HOST'),\n        port: _config.get('TYPEORM_PORT'),\n        username: _config.get('TYPEORM_USERNAME'),\n        password: _config.get('TYPEORM_PASSWORD'),\n        database: _config.get('TYPEORM_DATABASE'),\n        entities: [__dirname + '/core/**/*.entity{.ts,.js}'],\n        synchronize: _config.get('TYPEORM_SYNCRHONIZE'),\n        logging: true,\n      }),\n      inject: [ConfigService]\n    }),\n    // multer config async for upload files\n    MulterModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (_config: ConfigService) => ({\n        dest: path.join(__dirname, _config.get('MULTER_DEST')),\n        \n      }),\n      inject: [ConfigService]\n    }),\n    // http config  async is for petitions type ajax\n    HttpModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (_config: ConfigService) => ({\n        timeout: _config.get('HTTP_TIMEOUT'),\n        maxRedirects: _config.get('HTTP_MAX_REDIRECTS'),\n      }),\n      inject: [ConfigService],\n    }),\n    UserModule,\n    AuthModule,\n    RolModule,\n    ConfigModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_FILTER,\n      useClass: HttpErrorFilter,\n    },\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: LoggerInterceptor,\n    },\n  ],\n\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: AuthDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n            \n                \n                    Defined in src/core/auth/auth.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                AuthDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Body, Post, Get, UseGuards, Logger, UseInterceptors, ClassSerializerInterceptor } from '@nestjs/common';\nimport { AuthDTO } from './auth.dto';\nimport { AuthService } from './auth.service';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Controller('api/auth')\nexport class AuthController {\n\n    constructor(\n        private _auth: AuthService,\n    ) { }\n\n    @Post('login')\n    async login(@Body() user: AuthDTO) {\n        return this._auth.login(user)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDTO.html":{"url":"classes/AuthDTO.html","title":"class - AuthDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/auth.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                password\n                            \n                            \n                                    Optional\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/auth/auth.dto.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/auth/auth.dto.ts:2\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class AuthDTO {\n    user?: string;\n    password?: string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthMiddleware.html":{"url":"injectables/AuthMiddleware.html","title":"injectable - AuthMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middlewares/auth.middleware.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            use\n                        \n                        \n                    \n                \n            \n            \n                \nuse(req: any, res: any, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/middlewares/auth.middleware.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\n\n@Injectable()\nexport class AuthMiddleware implements NestMiddleware {\n    use(req: any, res: any, next: () => void) {\n        next();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nConfigModule\n\nConfigModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nConfigModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UserModule } from '../user/user.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigService } from '../../config/config.service';\nimport { ConfigModule } from '../../config/config.module';\nimport { AuthController } from './auth.controller';\nimport { JwtStrategy } from './auth.strategy';\n\n@Module({\n  imports: [\n    UserModule,\n    ConfigModule,\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (_config: ConfigService) => ({\n        secret: _config.get('TOKEN_SECRET'),\n        signOptions: { expiresIn: '7d' },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n})\nexport class AuthModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/auth.service.ts\n        \n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                service\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_users: UserService, _jwt: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/core/auth/auth.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _users\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _jwt\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(payload: AuthDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/core/auth/auth.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                AuthDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(undefined: any)\n                \n            \n\n\n            \n                \n                    Defined in src/core/auth/auth.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            service\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'AuthService'\n                        \n                    \n                        \n                            \n                                    Defined in src/core/auth/auth.service.ts:13\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, HttpStatus, HttpException, Logger } from '@nestjs/common';\nimport { UserService } from '../user/user.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '../../config/config.service';\nimport { sign } from 'jsonwebtoken';\nimport { AuthDTO } from './auth.dto';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class AuthService {\n    private readonly service = 'AuthService'\n    constructor(\n        private readonly _users: UserService,\n        private readonly _jwt: JwtService,\n    ) { }\n\n    async validateUser({ user }: any) {\n        return await this._users.getOneByUser(user.user)\n\n    }\n\n    async login(payload: AuthDTO) {\n        const user = await this._users.getOneByUser(payload.user)\n        if (!user || !(await user.comparePassword(payload.password))) {\n            throw new HttpException({ error: 'Credenciales invalidas', where: this.service + '::validateUser' }, HttpStatus.UNAUTHORIZED)\n        }\n        const token = await this._jwt.sign({ user })\n        return { token, user }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigModule.html":{"url":"modules/ConfigModule.html","title":"module - ConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_exports\n\n\n\n\nConfigService \n\nConfigService \n\n\n\nConfigModule\n\nConfigModule\n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/config/config.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            ConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigService } from './config.service';\n\n@Module({\n  providers: [\n    {\n      provide: ConfigService,\n      useValue: new ConfigService(`${process.env.NODE_ENV || 'development'}.env`),\n    },\n  ],\n  exports: [ConfigService],\n})\nexport class ConfigModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConfigService.html":{"url":"injectables/ConfigService.html","title":"injectable - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/config.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                envConfig\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                            \n                                    Private\n                                validateInput\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(filePath: string)\n                    \n                \n                        \n                            \n                                Defined in src/config/config.service.ts:12\n                            \n                        \n\n                \n                    \n                            Creates an instance of config service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        filePath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                config default .env\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/config/config.service.ts:60\n                \n            \n\n\n            \n                \n                    Gets config service\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        config json\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        get any config\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            validateInput\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateInput(envConfig: EnvConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/config/config.service.ts:28\n                \n            \n\n\n            \n                \n                    Validates input\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    envConfig\n                                    \n                                                EnvConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        validadion\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         EnvConfig\n\n                    \n                    \n                        input boolean\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            envConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EnvConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in src/config/config.service.ts:12\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as dotenv from 'dotenv';\nimport * as fs from 'fs';\nimport * as Joi from '@hapi/joi';\n\nexport interface EnvConfig {\n  [key: string]: string;\n}\n\n@Injectable()\nexport class ConfigService {\n  private readonly envConfig: EnvConfig;\n\n  /**\n   * Creates an instance of config service.\n   * @param filePath config default .env\n   */\n  constructor(filePath: string) {\n    const config = dotenv.parse(fs.readFileSync(filePath));\n    this.envConfig = this.validateInput(config);\n  }\n\n  /**\n   * Validates input\n   * @param envConfig validadion\n   * @returns input boolean\n   */\n  private validateInput(envConfig: EnvConfig): EnvConfig {\n    const envVarsSchema: Joi.ObjectSchema = Joi.object({\n      NODE_ENV: Joi.string().default('development'),\n      PORT: Joi.number().default(3000),\n      TOKEN_SECRET: Joi.string().required(),\n      HOST: Joi.string().required(),\n      TYPEORM_TYPE: Joi.string().required(),\n      TYPEORM_HOST: Joi.string().required(),\n      TYPEORM_PORT: Joi.number().required(),\n      TYPEORM_USERNAME: Joi.string().required(),\n      TYPEORM_PASSWORD: Joi.string().default(''),\n      TYPEORM_DATABASE: Joi.string().required(),\n      TYPEORM_SYNCRHONIZE: Joi.string().required(),\n      MULTER_DEST: Joi.string().required(),\n      HTTP_TIMEOUT: Joi.number().default(5000),\n      HTTP_MAX_REDIRECTS: Joi.number().default(5),\n    });\n\n    const { error, value: validatedEnvConfig } = envVarsSchema.validate(\n      envConfig,\n    );\n    if (error) {\n      throw new Error(`Config validation error: ${error.message}`);\n    }\n    return validatedEnvConfig;\n  }\n\n  /**\n   * Gets config service\n   * @param key config json\n   * @returns get any config\n   */\n  get(key: string): any {\n    return this.envConfig[key];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EnvConfig.html":{"url":"interfaces/EnvConfig.html","title":"interface - EnvConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  EnvConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/config.service.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        string\n\n                    \n                \n                        \n                            \n                                Defined in src/config/config.service.ts:6\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as dotenv from 'dotenv';\nimport * as fs from 'fs';\nimport * as Joi from '@hapi/joi';\n\nexport interface EnvConfig {\n  [key: string]: string;\n}\n\n@Injectable()\nexport class ConfigService {\n  private readonly envConfig: EnvConfig;\n\n  /**\n   * Creates an instance of config service.\n   * @param filePath config default .env\n   */\n  constructor(filePath: string) {\n    const config = dotenv.parse(fs.readFileSync(filePath));\n    this.envConfig = this.validateInput(config);\n  }\n\n  /**\n   * Validates input\n   * @param envConfig validadion\n   * @returns input boolean\n   */\n  private validateInput(envConfig: EnvConfig): EnvConfig {\n    const envVarsSchema: Joi.ObjectSchema = Joi.object({\n      NODE_ENV: Joi.string().default('development'),\n      PORT: Joi.number().default(3000),\n      TOKEN_SECRET: Joi.string().required(),\n      HOST: Joi.string().required(),\n      TYPEORM_TYPE: Joi.string().required(),\n      TYPEORM_HOST: Joi.string().required(),\n      TYPEORM_PORT: Joi.number().required(),\n      TYPEORM_USERNAME: Joi.string().required(),\n      TYPEORM_PASSWORD: Joi.string().default(''),\n      TYPEORM_DATABASE: Joi.string().required(),\n      TYPEORM_SYNCRHONIZE: Joi.string().required(),\n      MULTER_DEST: Joi.string().required(),\n      HTTP_TIMEOUT: Joi.number().default(5000),\n      HTTP_MAX_REDIRECTS: Joi.number().default(5),\n    });\n\n    const { error, value: validatedEnvConfig } = envVarsSchema.validate(\n      envConfig,\n    );\n    if (error) {\n      throw new Error(`Config validation error: ${error.message}`);\n    }\n    return validatedEnvConfig;\n  }\n\n  /**\n   * Gets config service\n   * @param key config json\n   * @returns get any config\n   */\n  get(key: string): any {\n    return this.envConfig[key];\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpErrorFilter.html":{"url":"classes/HttpErrorFilter.html","title":"class - HttpErrorFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpErrorFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/http-error.filter.ts\n        \n\n            \n                Description\n            \n            \n                Catch HttpErrorFilter implements ExceptionFilter\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/filters/http-error.filter.ts:23\n                \n            \n\n\n            \n                \n                    Catchs http error filter\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Http exception\n\n                                    \n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        argiment host\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  ArgumentsHost,\n  Logger,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { HttpArgumentsHost } from '@nestjs/common/interfaces';\nimport { writeLoggerError, METHODS } from '../personal-logger/PersonaLogger';\n\n/**\n * Catch HttpErrorFilter implements ExceptionFilter\n */\n@Catch()\nexport class HttpErrorFilter implements ExceptionFilter {\n  /**\n   * Catchs http error filter\n   * @param exception Http exception\n   * @param host argiment host\n   */\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx: HttpArgumentsHost = host.switchToHttp();\n    const request = ctx.getRequest();\n    const response = ctx.getResponse();\n    const status =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n    const where: string = exception.message.where || 'Library, DataBase o path';\n    const errorResponce = {\n      code: status,\n      timestamps: new Date().toLocaleDateString(),\n      path: request.url,\n      method: request.method,\n      message: exception.message.error || exception.message || null,\n    };\n    Logger.error(\n      writeLoggerError(\n        request.method as METHODS,\n        request.url,\n        errorResponce,\n        where,\n        request.connection.remoteAddress,\n      ),\n      exception.stack,\n      where,\n    );\n\n    response.status(status).json(errorResponce);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/auth.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_auth: AuthService, _config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/core/auth/auth.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _auth\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _config\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/core/auth/auth.strategy.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, HttpException, HttpStatus } from '@nestjs/common';\nimport { ConfigService } from '../../config/config.service';\nimport { AuthService } from './auth.service';\nimport { AuthDTO } from './auth.dto';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n\n    constructor(\n        private readonly _auth: AuthService,\n        private readonly _config: ConfigService,\n    ) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            ignoreExpiration: false,\n            secretOrKey: _config.get('TOKEN_SECRET'),\n        });\n    }\n\n    async validate(payload: any) {\n        const user = await this._auth.validateUser(payload);\n        if (!user) {\n            throw new HttpException({ error: 'Credenciales invalidas', where: 'AuthStrategy::validate' }, HttpStatus.UNAUTHORIZED)\n        }\n        return { ...user };\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerInterceptor.html":{"url":"injectables/LoggerInterceptor.html","title":"injectable - LoggerInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LoggerInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/logger.interceptor.ts\n        \n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, call$: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/interceptors/logger.interceptor.ts:24\n                \n            \n\n\n            \n                \n                    Intercepts logger interceptor\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        context\n\n                                    \n                                \n                                \n                                    call$\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        interceptor\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        intercept call$\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  Logger,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { writeLogger, METHODS } from '../personal-logger/PersonaLogger';\nimport { Request } from 'express';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class LoggerInterceptor implements NestInterceptor {\n  /**\n   * Intercepts logger interceptor\n   * @param context context\n   * @param call$ interceptor\n   * @returns intercept call$\n   */\n  intercept(\n    context: ExecutionContext,\n    call$: CallHandler,\n  ): Observable {\n    const request = context.switchToHttp().getRequest();\n    const { method, url, hostname } = request;\n    const now = Date.now();\n    return call$.handle().pipe(\n      tap(() => {\n        Logger.log(\n          writeLogger(\n            method as METHODS,\n            url,\n            now,\n            context.getClass().name,\n            hostname,\n            context.getHandler().name,\n          ),\n          context.getClass().name,\n        );\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RolAccess.html":{"url":"interfaces/RolAccess.html","title":"interface - RolAccess","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RolAccess\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/rol/rol.entity.ts\n        \n\n            \n                Description\n            \n            \n                Rol access\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        rols\n                                \n                                \n                                        users\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        rols\n                                    \n                                \n                                \n                                    \n                                        rols:         Access\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Access\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        users\n                                    \n                                \n                                \n                                    \n                                        users:         Access\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Access\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, OneToMany } from 'typeorm';\nimport { UserEntity } from '../user/user.entity';\n\n/**\n * Entity  rol\n */\n@Entity('rol')\nexport class RolEntity {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({ length: 100, unique: true })\n    name: string;\n\n    @Column({ type: 'json' })\n    access: RolAccess\n\n    @OneToMany(type => UserEntity, user => user.rol)\n    users: UserEntity[]\n\n    @Column({ default: false })\n    disabled: boolean;\n}\n\n/**\n * Access\n */\nexport interface Access {\n    read: boolean;\n    write: boolean;\n}\n\n/**\n * Rol access\n */\nexport interface RolAccess {\n    users: Access\n    rols: Access\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RolController.html":{"url":"controllers/RolController.html","title":"controller - RolController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RolController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/rol/rol.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/rol\n            \n\n            \n                Description\n            \n            \n                Controller api rol\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                getAll\n                            \n                            \n                                getOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(rol: RolDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UsePipes(ValidatorPipe)\n                \n            \n\n            \n                \n                    Defined in src/core/rol/rol.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rol\n                                    \n                                                RolDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/core/rol/rol.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/core/rol/rol.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOne\n                        \n                        \n                    \n                \n            \n            \n                \ngetOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/core/rol/rol.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: number, rol: RolDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@UsePipes(ValidatorPipe)\n                \n            \n\n            \n                \n                    Defined in src/core/rol/rol.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rol\n                                    \n                                                RolDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Post, Body, Put, Delete, UsePipes, UseGuards } from '@nestjs/common';\nimport { RolService } from './rol.service';\nimport { RolDTO } from './rol.dto';\nimport { ValidatorPipe } from '../../pipes/validator.pipe';\nimport { AuthGuard } from '@nestjs/passport';\n\n/**\n * Controller api rol\n */\n@UseGuards(AuthGuard('jwt'))\n@Controller('api/rol')\nexport class RolController {\n\n    constructor(private readonly _rols: RolService) { }\n\n    @Get()\n    getAll() {\n        return this._rols.getAll();\n    }\n    @Get(':id')\n    getOne(@Param('id') id: number) {\n        return this._rols.getOne(id);\n    }\n    @Post()\n    @UsePipes(ValidatorPipe)\n    create(@Body() rol: RolDTO) {\n        return this._rols.created(rol);\n    }\n    @Put(':id')\n    @UsePipes(ValidatorPipe)\n    update(@Param('id') id: number, @Body() rol: RolDTO) {\n        return this._rols.updated(id, rol);\n    }\n\n    @Delete(':id')\n    delete(@Param('id') id: number) {\n        return this._rols.deleted(id);\n    }\n\n\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RolDTO.html":{"url":"classes/RolDTO.html","title":"class - RolDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RolDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/rol/rol.dto.ts\n        \n\n            \n                Description\n            \n            \n                Rol dto\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access\n                            \n                            \n                                    Optional\n                                disabled\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            access\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         RolAccess\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty({message: 'accessos invalidos'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/rol/rol.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            disabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/rol/rol.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString({message: 'El nombre es una cadena'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/rol/rol.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { RolAccess } from \"./rol.entity\";\nimport { IsEmpty, IsString, Length, IsNotEmpty, IsJSON } from \"class-validator\";\n\n/**\n * Rol dto\n */\nexport class RolDTO {\n    @IsString({ message: 'El nombre es una cadena' })\n    name: string\n\n    @IsNotEmpty({ message: 'accessos invalidos' })\n    access: RolAccess\n\n    disabled?: boolean\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RolEntity.html":{"url":"classes/RolEntity.html","title":"class - RolEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RolEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/rol/rol.entity.ts\n        \n\n            \n                Description\n            \n            \n                Entity  rol\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access\n                            \n                            \n                                disabled\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            access\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         RolAccess\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'json'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/rol/rol.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            disabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/rol/rol.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/rol/rol.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 100, unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/rol/rol.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            users\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserEntity[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/rol/rol.entity.ts:19\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, OneToMany } from 'typeorm';\nimport { UserEntity } from '../user/user.entity';\n\n/**\n * Entity  rol\n */\n@Entity('rol')\nexport class RolEntity {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({ length: 100, unique: true })\n    name: string;\n\n    @Column({ type: 'json' })\n    access: RolAccess\n\n    @OneToMany(type => UserEntity, user => user.rol)\n    users: UserEntity[]\n\n    @Column({ default: false })\n    disabled: boolean;\n}\n\n/**\n * Access\n */\nexport interface Access {\n    read: boolean;\n    write: boolean;\n}\n\n/**\n * Rol access\n */\nexport interface RolAccess {\n    users: Access\n    rols: Access\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolModule.html":{"url":"modules/RolModule.html","title":"module - RolModule","body":"\n                   \n\n\n\n\n    Modules\n    RolModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RolModule\n\n\n\ncluster_RolModule_providers\n\n\n\n\nRolService\n\nRolService\n\n\n\nRolModule\n\nRolModule\n\nRolModule -->\n\nRolService->RolModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/rol/rol.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RolService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RolController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RolService } from './rol.service';\nimport { RolController } from './rol.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { RolEntity } from './rol.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([RolEntity])],\n  providers: [RolService],\n  controllers: [RolController]\n})\nexport class RolModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RolService.html":{"url":"injectables/RolService.html","title":"injectable - RolService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RolService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/rol/rol.service.ts\n        \n\n            \n                Description\n            \n            \n                Injectable Rol Service\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                service\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                created\n                            \n                            \n                                    Async\n                                deleted\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getOne\n                            \n                            \n                                    Async\n                                updated\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repRol: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/core/rol/rol.service.ts:12\n                            \n                        \n\n                \n                    \n                            Creates an instance of rol service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repRol\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            created\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    created(newRol: RolDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/core/rol/rol.service.ts:45\n                \n            \n\n\n            \n                \n                    Creates rol service\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    newRol\n                                    \n                                                RolDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        create \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleted\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleted(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/rol/rol.service.ts:69\n                \n            \n\n\n            \n                \n                    Deletes rol service\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        delete \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/core/rol/rol.service.ts:25\n                \n            \n\n\n            \n                \n                    Gets all\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        all \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/rol/rol.service.ts:34\n                \n            \n\n\n            \n                \n                    Gets one\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        one \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updated\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updated(id: number, rol: RolDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/core/rol/rol.service.ts:57\n                \n            \n\n\n            \n                \n                    Updated rol service\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rol\n                                    \n                                                RolDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        updated \n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            service\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'RolService'\n                        \n                    \n                        \n                            \n                                    Defined in src/core/rol/rol.service.ts:12\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { RolEntity } from './rol.entity';\nimport { Repository } from 'typeorm';\nimport { RolDTO } from './rol.dto';\n\n/**\n * Injectable Rol Service\n */\n@Injectable()\nexport class RolService {\n    private service: string = 'RolService'\n    /**\n     * Creates an instance of rol service.\n     * @param repRol \n     */\n    constructor(\n        @InjectRepository(RolEntity) private readonly repRol: Repository\n    ) { }\n\n    /**\n     * Gets all\n     * @returns all \n     */\n    async getAll(): Promise {\n        return await this.repRol.find({ where: { disabled: false } });\n    }\n\n    /**\n     * Gets one\n     * @param id \n     * @returns one \n     */\n    async getOne(id: number): Promise {\n        const rol = await this.repRol.findOne({ id, disabled: false })\n        if (!rol) throw new HttpException({ error: 'No se encontro el rol', where: this.service + '::getOne' }, HttpStatus.NOT_FOUND)\n        return rol\n    }\n\n    /**\n     * Creates rol service\n     * @param newRol \n     * @returns create \n     */\n    async created(newRol: RolDTO): Promise {\n        const rol = await this.repRol.create(newRol)\n        await this.repRol.save(rol)\n        return rol\n    }\n\n    /**\n     * Updated rol service\n     * @param id \n     * @param rol \n     * @returns updated \n     */\n    async updated(id: number, rol: RolDTO): Promise {\n        const rolUpdated = await this.repRol.findOne({ id })\n        if (!rolUpdated) throw new HttpException({ error: 'No se encontro el rol', where: this.service + '::updated' }, HttpStatus.NOT_FOUND)\n        await this.repRol.update({ id }, { ...rol })\n        return { ...rolUpdated, ...rol }\n    }\n\n    /**\n     * Deletes rol service\n     * @param id \n     * @returns delete \n     */\n    async deleted(id: number): Promise {\n        const rol = await this.repRol.findOne({ id })\n        if (!rol) throw new HttpException({ error: 'No se encontro el rol', where: this.service+'::deleted' }, HttpStatus.NOT_FOUND)\n        await this.repRol.update({ id }, { disabled: true })\n        return { deleted: true }\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/user\n            \n\n            \n                Description\n            \n            \n                Controller users\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                getAll\n                            \n                            \n                                getOne\n                            \n                            \n                                update\n                            \n                            \n                                    Async\n                                uploadPhoto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(user: Partial)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/core/user/user.controller.ts:50\n                \n            \n\n\n            \n                \n                    Posts user controller\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        to new user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        new user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/core/user/user.controller.ts:82\n                \n            \n\n\n            \n                \n                    Deletes user controller\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/core/user/user.controller.ts:32\n                \n            \n\n\n            \n                \n                    Gets user controller\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        users[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOne\n                        \n                        \n                    \n                \n            \n            \n                \ngetOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/core/user/user.controller.ts:41\n                \n            \n\n\n            \n                \n                    Gets user controller\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        by user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: number, user: Partial)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/core/user/user.controller.ts:72\n                \n            \n\n\n            \n                \n                    Puts user controller\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        by user\n\n                                    \n                                \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        params to new user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        user updated\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            uploadPhoto\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPhoto(files)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('photo')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/core/user/user.controller.ts:62\n                \n            \n\n\n            \n                \n                    Posts user controller\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        new user\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Param,\n    Post,\n    Body,\n    Put,\n    Delete,\n    UseGuards,\n    UploadedFiles,\n    UseInterceptors,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserDTO } from './user.dto';\nimport { AuthGuard } from '@nestjs/passport';\nimport { FilesInterceptor } from '@nestjs/platform-express';\nimport { generateStorageMulter } from '../../config/constants';\n\n/**\n * Controller users\n */\n@UseGuards(AuthGuard('jwt'))\n@Controller('api/user')\nexport class UserController {\n    constructor(private readonly _users: UserService) {}\n\n    /**\n     * Gets user controller\n     * @returns  users[]\n     */\n    @Get()\n    getAll() {\n        return this._users.getAll();\n    }\n    /**\n     * Gets user controller\n     * @param id by user\n     * @returns  user\n     */\n    @Get(':id')\n    getOne(@Param('id') id: number) {\n        return this._users.getOne(id);\n    }\n    /**\n     * Posts user controller\n     * @param user to new user\n     * @returns  new user\n     */\n    @Post()\n    create(@Body() user: Partial) {\n        return this._users.created(user as UserDTO);\n    }\n    /**\n     * Posts user controller\n     * @param user to new user\n     * @returns  new user\n     */\n    @Post('photo')\n    @UseInterceptors(\n        FilesInterceptor('photo', 1, generateStorageMulter('images')),\n    )\n    async uploadPhoto(@UploadedFiles() files) {\n        return { yes: files };\n    }\n    /**\n     * Puts user controller\n     * @param id  by user\n     * @param user params to new user\n     * @returns  user updated\n     */\n    @Put(':id')\n    update(@Param('id') id: number, @Body() user: Partial) {\n        return this._users.updated(id, user as UserDTO);\n    }\n\n    /**\n     * Deletes user controller\n     * @param id\n     * @returns\n     */\n    @Delete(':id')\n    delete(@Param('id') id: number) {\n        return this._users.deleted(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDTO.html":{"url":"classes/UserDTO.html","title":"class - UserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/user.dto.ts\n        \n\n            \n                Description\n            \n            \n                User dto\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                active\n                            \n                            \n                                    Optional\n                                disabled\n                            \n                            \n                                    Optional\n                                email\n                            \n                            \n                                lastname\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                password\n                            \n                            \n                                rol\n                            \n                            \n                                    Optional\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            active\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/user/user.dto.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            disabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/user/user.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/user/user.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastname\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/user/user.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/user/user.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/user/user.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rol\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         RolDTO\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/user/user.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/user/user.dto.ts:8\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { RolDTO } from '../rol/rol.dto';\n\n/**\n * User dto\n */\nexport class UserDTO {\n    name: string;\n    user?: string;\n    email?: string;\n    password?: string;\n    lastname: string;\n    rol: RolDTO;\n    active?: boolean;\n    disabled?: boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/user.entity.ts\n        \n\n            \n                Description\n            \n            \n                Entity user\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                active\n                            \n                            \n                                disabled\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                lastname\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                rol\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                comparePassword\n                            \n                            \n                                setPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    fullName\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/core/user/user.entity.ts:42\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            active\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/user/user.entity.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            disabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/user/user.entity.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 100, unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/user/user.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/user/user.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastname\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 100})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/user/user.entity.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 100})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/user/user.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 60})@Exclude()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/user/user.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rol\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         RolEntity\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/user/user.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 100, unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/user/user.entity.ts:23\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            comparePassword\n                        \n                        \n                    \n                \n            \n            \n                \ncomparePassword(compare: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/user/user.entity.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    compare\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setPassword\n                        \n                        \n                    \n                \n            \n            \n                \nsetPassword()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @BeforeInsert()\n                \n            \n\n            \n                \n                    Defined in src/core/user/user.entity.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        fullName\n                    \n                \n\n                \n                    \n                        getfullName()\n                    \n                \n                            \n                                \n                                    Defined in src/core/user/user.entity.ts:49\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {\n    Entity,\n    Column,\n    PrimaryGeneratedColumn,\n    BeforeInsert,\n    ManyToOne,\n} from 'typeorm';\nimport { RolEntity } from '../rol/rol.entity';\nimport * as bcrypt from 'bcrypt';\nimport { Exclude, Expose } from 'class-transformer';\n/**\n * Entity user\n */\n@Entity('user')\nexport class UserEntity {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({ length: 100 })\n    name: string;\n\n    @Column({ length: 100, unique: true })\n    user: string;\n\n    @Column({ length: 100, unique: true })\n    email: string;\n\n    @Column({ length: 60 })\n    @Exclude()\n    password: string;\n\n    @Column({ length: 100 })\n    lastname: string;\n\n    @ManyToOne((type) => RolEntity, (rol) => rol.users)\n    rol: RolEntity;\n\n    @Column({ default: true })\n    active: boolean;\n\n    @Column({ default: false })\n    disabled: boolean;\n\n    constructor(partial: Partial) {\n        Object.assign(this, partial);\n    }\n\n    @Expose()\n    get fullName(): string {\n        return `${this.name} ${this.lastname}`;\n    }\n\n    @BeforeInsert()\n    setPassword() {\n        this.password = bcrypt.hashSync(this.password, 10);\n    }\n\n    comparePassword(compare: string) {\n        return bcrypt.compareSync(compare, this.password);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/user/user.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserEntity } from './user.entity';\n@Module({\n  imports: [TypeOrmModule.forFeature([UserEntity])],\n  providers: [UserService],\n  controllers: [UserController],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/user.service.ts\n        \n\n            \n                Description\n            \n            \n                Injectable\nUserService\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                service\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                created\n                            \n                            \n                                    Async\n                                deleted\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getOne\n                            \n                            \n                                    Async\n                                getOneByUser\n                            \n                            \n                                    Async\n                                updated\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repUser: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/core/user/user.service.ts:13\n                            \n                        \n\n                \n                    \n                            Creates an instance of user service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repUser\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            created\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    created(newUser: UserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/core/user/user.service.ts:74\n                \n            \n\n\n            \n                \n                    Creates user service\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    newUser\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        data to create new user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        user created\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleted\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleted(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/user/user.service.ts:114\n                \n            \n\n\n            \n                \n                    Deletes user service update status disabled true\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        key user to deleted\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        status deleted user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/core/user/user.service.ts:27\n                \n            \n\n\n            \n                \n                    Gets all users\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        users un database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/user/user.service.ts:39\n                \n            \n\n\n            \n                \n                    Gets one user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        key  to user serched\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        user serched\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getOneByUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOneByUser(user: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/user/user.service.ts:61\n                \n            \n\n\n            \n                \n                    Gets one by user and password\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        one by user and password\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updated\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updated(id: number, user: UserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/core/user/user.service.ts:91\n                \n            \n\n\n            \n                \n                    Updated user service\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        key to user update\n\n                                    \n                                \n                                \n                                    user\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new data for user updated\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        user updated\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            service\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'UserService'\n                        \n                    \n                        \n                            \n                                    Defined in src/core/user/user.service.ts:13\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { UserDTO } from './user.dto';\nimport { UserEntity } from './user.entity';\n\n/**\n * Injectable\n * UserService\n */\n@Injectable()\nexport class UserService {\n    private service: string = 'UserService';\n    /**\n     * Creates an instance of user service.\n     * @param repUser\n     */\n    constructor(\n        @InjectRepository(UserEntity)\n        private readonly repUser: Repository,\n    ) {}\n\n    /**\n     * Gets all users\n     * @returns {Promise} users un database\n     */\n    async getAll(): Promise {\n        return await this.repUser.find({\n            where: { disabled: false },\n            relations: ['rol'],\n        });\n    }\n\n    /**\n     * Gets one user\n     * @param {number} id  key  to user serched\n     * @returns {Promise} user serched\n     */\n    async getOne(id: number): Promise {\n        const user = await this.repUser.findOne(\n            { id, disabled: false },\n            { relations: ['rol'] },\n        );\n        if (!user) {\n            throw new HttpException(\n                {\n                    error: 'No se encontro el usuario',\n                    where: this.service + '::getOne',\n                },\n                HttpStatus.NOT_FOUND,\n            );\n        }\n        return user;\n    }\n\n    /**\n     * Gets one by user and password\n     * @param user user\n     * @returns one by user and password\n     */\n    async getOneByUser(user: string): Promise {\n        const userFinded = await this.repUser.findOne({\n            where: `user = '${user}' OR email = '${user}'`,\n            relations: ['rol'],\n        });\n        return userFinded;\n    }\n\n    /**\n     * Creates user service\n     * @param {UserDTO} newUser data to create new user\n     * @returns  { Promise} user created\n     */\n    async created(newUser: UserDTO): Promise {\n        const user = await this.repUser.create(newUser);\n        await this.repUser.save(user);\n        return await this.repUser.findOne({\n            where: {\n                id: user.id,\n            },\n            relations: ['rol'],\n        });\n    }\n\n    /**\n     * Updated user service\n     * @param {number} id key to user update\n     * @param  {UserDTO} user new data for user updated\n     * @returns {Promise} user updated\n     */\n    async updated(id: number, user: UserDTO): Promise {\n        const userUpdated = await this.repUser.findOne(\n            { id },\n            { relations: ['rol'] },\n        );\n        if (!userUpdated) {\n            throw new HttpException(\n                {\n                    error: 'No se encontro el usuario',\n                    where: this.service + '::updated',\n                },\n                HttpStatus.NOT_FOUND,\n            );\n        }\n        await this.repUser.update({ id }, { ...user });\n        return { ...userUpdated, ...user } as UserEntity;\n    }\n\n    /**\n     * Deletes user service update status disabled true\n     * @param {number}  id key user to deleted\n     * @returns {Promise} status deleted user\n     */\n    async deleted(id: number): Promise {\n        const user = await this.repUser.findOne({ id }, { relations: ['rol'] });\n        if (!user) {\n            throw new HttpException(\n                {\n                    error: 'No se encontro el usuario',\n                    where: this.service + '::deleted',\n                },\n                HttpStatus.NOT_FOUND,\n            );\n        }\n        await this.repUser.update({ id }, { disabled: true });\n        return { deleted: true };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidatorPipe.html":{"url":"injectables/ValidatorPipe.html","title":"injectable - ValidatorPipe","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ValidatorPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pipes/validator.pipe.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                formatError\n                            \n                            \n                                    Private\n                                isEmpty\n                            \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            formatError\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    formatError(errors: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/pipes/validator.pipe.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errors\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isEmpty\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isEmpty(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/pipes/validator.pipe.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            toValidate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/pipes/validator.pipe.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, undefined: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/pipes/validator.pipe.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    ArgumentMetadata,\n    Injectable,\n    PipeTransform,\n    HttpException,\n    HttpStatus,\n    Logger,\n} from '@nestjs/common';\nimport { validate } from 'class-validator';\nimport { plainToClass } from 'class-transformer';\n\n@Injectable()\nexport class ValidatorPipe implements PipeTransform {\n    async transform(value: any, { metatype }: ArgumentMetadata) {\n        if (value instanceof Object && this.isEmpty(value)) {\n            throw new HttpException('Peticion vacia', HttpStatus.BAD_REQUEST);\n        }\n        if (!metatype || !this.toValidate(metatype)) {\n            return value;\n        }\n        const object = plainToClass(metatype, value);\n        const errors = await validate(object);\n        if (errors.length > 0) {\n            throw new HttpException(\n                `Verifica tus campos:  ${this.formatError(errors)} `,\n                HttpStatus.BAD_REQUEST,\n            );\n        }\n        return value;\n    }\n\n    // tslint:disable-next-line: ban-types\n    private toValidate(metatype: Function): boolean {\n        // tslint:disable-next-line: ban-types\n        const types: Function[] = [String, Boolean, Number, Array, Object];\n\n        return !types.includes(metatype);\n    }\n    private formatError(errors: any[]) {\n        Logger.log(JSON.stringify(errors[0].constraints));\n        return errors\n            .map((e) => {\n                // tslint:disable-next-line: forin\n                for (const key in e.constraints) {\n                    return e.constraints[key];\n                }\n            })\n            .join(', ');\n    }\n    private isEmpty(value: any) {\n        return Object.keys(value).length > 0 ? false : true;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/config/config.service.ts\n            \n            injectable\n            ConfigService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/config/config.service.ts\n            \n            interface\n            EnvConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/constants.ts\n            \n            variable\n            generateStorageMulter\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/auth/auth.dto.ts\n            \n            class\n            AuthDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/core/auth/auth.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/rol/rol.controller.ts\n            \n            controller\n            RolController\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/core/rol/rol.dto.ts\n            \n            class\n            RolDTO\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/core/rol/rol.entity.ts\n            \n            class\n            RolEntity\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/core/rol/rol.entity.ts\n            \n            interface\n            Access\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/core/rol/rol.entity.ts\n            \n            interface\n            RolAccess\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/core/rol/rol.service.ts\n            \n            injectable\n            RolService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                src/core/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/core/user/user.dto.ts\n            \n            class\n            UserDTO\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                src/core/user/user.entity.ts\n            \n            class\n            UserEntity\n            \n                7 %\n                (1/13)\n            \n        \n        \n            \n                \n                src/core/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/filters/http-error.filter.ts\n            \n            class\n            HttpErrorFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/interceptors/logger.interceptor.ts\n            \n            injectable\n            LoggerInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/middlewares/auth.middleware.ts\n            \n            injectable\n            AuthMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/personal-logger/PersonaLogger.ts\n            \n            function\n            writeFileLog\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/personal-logger/PersonaLogger.ts\n            \n            function\n            writeLogger\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/personal-logger/PersonaLogger.ts\n            \n            function\n            writeLoggerError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/personal-logger/PersonaLogger.ts\n            \n            variable\n            formatLog\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/personal-logger/PersonaLogger.ts\n            \n            variable\n            nameApp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pipes/validator.pipe.ts\n            \n            injectable\n            ValidatorPipe\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/joi : ^16.0.0\n        \n            @nestjs/common : ^6.0.0\n        \n            @nestjs/core : ^6.0.0\n        \n            @nestjs/jwt : ^6.1.1\n        \n            @nestjs/passport : ^6.1.0\n        \n            @nestjs/platform-express : ^6.0.0\n        \n            @nestjs/swagger : ^3.1.0\n        \n            @nestjs/typeorm : ^6.1.3\n        \n            bcrypt : ^3.0.6\n        \n            class-transformer : ^0.2.3\n        \n            class-validator : ^0.10.0\n        \n            dotenv : ^8.1.0\n        \n            moment : ^2.24.0\n        \n            multer : ^1.4.2\n        \n            mysql : ^2.17.1\n        \n            passport : ^0.4.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.12\n        \n            rimraf : ^2.6.2\n        \n            rxjs : ^6.3.3\n        \n            swagger-ui-express : ^4.1.0\n        \n            typeorm : ^0.2.18\n        \n            uuid : ^3.3.3\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            writeFileLog   (src/.../PersonaLogger.ts)\n                        \n                        \n                            writeLogger   (src/.../PersonaLogger.ts)\n                        \n                        \n                            writeLoggerError   (src/.../PersonaLogger.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/personal-logger/PersonaLogger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            writeFileLog\n                        \n                        \n                    \n                \n            \n            \n                \nwriteFileLog(logging)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    logging\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            writeLogger\n                        \n                        \n                    \n                \n            \n            \n                \nwriteLogger(method, url, now, className, ip, func)\n                \n            \n\n\n\n\n            \n                \n                    Writes logger error\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    method\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        'POST'|'GET'|'PUT'|'DELETE'\n\n                                    \n                                \n                                \n                                    url\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        route\n\n                                    \n                                \n                                \n                                    now\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    className\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        exemple (Controller::get)\n\n                                    \n                                \n                                \n                                    ip\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    func\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            writeLoggerError\n                        \n                        \n                    \n                \n            \n            \n                \nwriteLoggerError(method, url, error, className, ip)\n                \n            \n\n\n\n\n            \n                \n                    Writes logger error\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    method\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        'POST'|'GET'|'PUT'|'DELETE'\n\n                                    \n                                \n                                \n                                    url\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        route\n\n                                    \n                                \n                                \n                                    error\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        message to error\n\n                                    \n                                \n                                \n                                    className\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        exemple (Controller::get)\n\n                                    \n                                \n                                \n                                    ip\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_exports\n\n\n\ncluster_RolModule\n\n\n\ncluster_RolModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAuthModule -->\n\nConfigModule->AuthModule\n\n\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nConfigService \n\nConfigService \n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\n\n\nRolModule\n\nRolModule\n\nAppModule -->\n\nRolModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nRolService\n\nRolService\n\nRolModule -->\n\nRolService->RolModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            METHODS   (src/.../PersonaLogger.ts)\n                        \n                        \n                            Uploads   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/personal-logger/PersonaLogger.ts\n    \n    \n        \n            \n                \n                    \n                    METHODS\n                \n            \n            \n                \n                        \"GET\" | \"POST\" | \"PUT\" | \"DELETE\"\n\n                \n            \n        \n    \n    src/config/constants.ts\n    \n    \n        \n            \n                \n                    \n                    Uploads\n                \n            \n            \n                \n                        \"images\" | \"pdfs\" | \"xlsx\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            formatLog   (src/.../PersonaLogger.ts)\n                        \n                        \n                            generateStorageMulter   (src/.../constants.ts)\n                        \n                        \n                            nameApp   (src/.../PersonaLogger.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/personal-logger/PersonaLogger.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            formatLog\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'DD/MM/YYYY HH:mm:ss'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            nameApp\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.NAME_APP || 'maderas'\n                        \n                    \n\n\n            \n        \n\n    src/config/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            generateStorageMulter\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n  type: Uploads = 'images',\n  maxSize: number = 3,\n) => ({\n  storage: diskStorage({\n    destination: `./public/uploads/${type}`,\n    filename: (req, file, cb) => {\n      return cb(null, `${uuid()}${extname(file.originalname)}`);\n    },\n  }),\n  limits: {\n    fileSize: maxSize * 1024 * 1024,\n  },\n})\n                        \n                    \n\n                \n                    \n                        Generates storage multer\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
